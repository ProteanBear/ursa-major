{"ast":null,"code":"import { createHashHistory } from 'history';\nimport { DataCache } from './DataCache';\n/**请求方式 */\n\nvar Method;\n/**数据格式类型 */\n\n(function (Method) {\n  Method[\"GET\"] = \"GET\";\n  Method[\"HEAD\"] = \"HEAD\";\n  Method[\"POST\"] = \"POST\";\n  Method[\"PUT\"] = \"PUT\";\n  Method[\"PATCH\"] = \"PATCH\";\n  Method[\"DELETE\"] = \"DELETE\";\n})(Method || (Method = {}));\n\nvar ContentType;\n/**\n * 服务器返回的内容\n */\n\n(function (ContentType) {\n  ContentType[\"JSON\"] = \"application/json;charset=UTF-8\";\n  ContentType[\"Form\"] = \"application/x-www-form-urlencoded; charset=UTF-8\";\n  ContentType[\"Multipart\"] = \"multipart/form-data; charset=utf-8; boundary=__X_YZWJ_BOUNDARY__\";\n  ContentType[\"File\"] = \"application/octet-stream\";\n})(ContentType || (ContentType = {}));\n\n/**\n * Http请求\n */\nexport class HttpRequest {\n  /**\n   * 发送GET请求\n   * @param url 链接地址\n   * @param parameters 传递参数\n   */\n  get(url) {\n    url = this.fullUrl(url);\n    const option = this.defualtOption(url);\n\n    const _DataCache$instance$t = DataCache.instance.token(),\n          token = _DataCache$instance$t.token;\n\n    option.method = Method.GET;\n\n    if (token) {\n      const headers = new Headers();\n      headers.set(\"Authorization\", token);\n    }\n\n    return fetch(url, option).then(this.transform).then(this.responseData).catch(this.errorResponse);\n  }\n  /**\n   * 发送POST请求\n   * @param url 链接地址\n   * @param data 传递数据\n   */\n\n\n  post(url, data) {\n    url = this.fullUrl(url);\n    const option = this.defualtOption(url);\n\n    const _DataCache$instance$t2 = DataCache.instance.token(),\n          token = _DataCache$instance$t2.token;\n\n    option.method = Method.POST;\n    const headers = new Headers({\n      \"Content-Type\": ContentType.JSON\n    });\n\n    if (token) {\n      headers.set(\"Authorization\", token);\n    }\n\n    option.headers = headers;\n    option.body = JSON.stringify(data);\n    return fetch(url, option).then(this.transform).then(this.responseData).catch(this.errorResponse);\n  }\n  /**\n   * 上传文件或图片处理\n   * @param url 链接地址\n   * @param data 传递数据\n   */\n\n\n  upload(url, data) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /**\n   * 获取完整的链接地址（不以http开头，使用全局服务地址补全）\n   * @param url 链接地址\n   */\n\n\n  fullUrl(url) {\n    return !url || url.startsWith(\"http:\") || url.startsWith(\"https:\") ? url : process.env.REACT_APP_SERVER_DOMAIN + url;\n  }\n  /**\n   * 生成请求的Option设置\n   * @param url 链接地址,判断是否HTTPS\n   */\n\n\n  defualtOption(url) {\n    return {\n      cache: \"no-cache\",\n      credentials: url.startsWith(\"https:\") ? \"include\" : \"omit\",\n      mode: \"cors\",\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\"\n    };\n  }\n  /**\n   * 判断网络状态码，进行错误跳转\n   * @param response 请求返回内容\n   */\n\n\n  transform(response) {\n    //网络状态错误\n    if (!response.ok) {\n      const history = createHashHistory();\n\n      switch (response.status) {\n        case 404:\n          history.push(\"/public/error404\");\n          break;\n\n        case 403:\n          history.push(\"/public/error403\");\n          break;\n\n        case 500:\n        default:\n          history.push(\"/public/error500\");\n      }\n\n      throw new Error(\"\\u51FA\\u73B0\\u7F51\\u7EDC\\u9519\\u8BEF\\uFF01\\u72B6\\u6001\\u7801:\".concat(response.status, \",\\u9519\\u8BEF\\u5185\\u5BB9\\uFF1A\").concat(response.statusText, \".\"));\n    }\n\n    return response.json();\n  }\n  /**\n   * 解析服务端返回的Json内容，并生成Web端通用的处理对象\n   * @param response \n   */\n\n\n  responseData(response) {\n    return new Promise((resolve, reject) => resolve({\n      success: response.code === 0,\n      data: response.data,\n      message: response.msg\n    }));\n  }\n  /**\n   * 返回错误信息\n   * @param error 错误\n   */\n\n\n  errorResponse(error) {\n    return new Promise((resolve, reject) => reject({\n      success: false,\n      message: error.message\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/maqiang/编程/yzwj-recorder-web/src/app/Request.ts"],"names":["createHashHistory","DataCache","Method","ContentType","HttpRequest","get","url","fullUrl","option","defualtOption","instance","token","method","GET","headers","Headers","set","fetch","then","transform","responseData","catch","errorResponse","post","data","POST","JSON","body","stringify","upload","Error","startsWith","process","env","REACT_APP_SERVER_DOMAIN","cache","credentials","mode","redirect","referrerPolicy","response","ok","history","status","push","statusText","json","Promise","resolve","reject","success","code","message","msg","error"],"mappings":"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","sourcesContent":["import {createHashHistory} from 'history';\nimport { DataCache } from './DataCache';\n\n/**请求方式 */\nenum Method{\n    GET=\"GET\",HEAD=\"HEAD\",\n    POST=\"POST\",PUT=\"PUT\",PATCH=\"PATCH\",\n    DELETE=\"DELETE\"\n}\n\n/**数据格式类型 */\nenum ContentType{\n    JSON=\"application/json;charset=UTF-8\",\n    Form=\"application/x-www-form-urlencoded; charset=UTF-8\",\n    Multipart=\"multipart/form-data; charset=utf-8; boundary=__X_YZWJ_BOUNDARY__\",\n    File=\"application/octet-stream\"\n}\n\n/**\n * 服务器返回的内容\n */\ninterface ServerResponse<R>{\n    code:number,\n    data?:R,\n    msg:string\n}\n\n/**\n * 定义接口返回类型\n */\nexport interface HttpResponse<R>{\n    success:boolean,\n    data?:R,\n    message?:string\n}\n\n/**\n * Http请求\n */\nexport class HttpRequest{\n    /**\n     * 发送GET请求\n     * @param url 链接地址\n     * @param parameters 传递参数\n     */\n    get<R>(url: string): Promise<HttpResponse<R>> {\n        url=this.fullUrl(url);\n        const option:RequestInit=this.defualtOption(url);\n        const {token}=DataCache.instance.token();\n\n        option.method=Method.GET;\n        if(token){\n            const headers=new Headers();\n            headers.set(\"Authorization\",token);\n        }\n        return fetch(url,option)\n                .then<ServerResponse<R>>(this.transform)\n                .then<HttpResponse<R>>(this.responseData)\n                .catch<HttpResponse<R>>(this.errorResponse);\n    } \n    \n    /**\n     * 发送POST请求\n     * @param url 链接地址\n     * @param data 传递数据\n     */\n    post<R, P = {}>(url: string, data?: P): Promise<HttpResponse<R>> {\n        url=this.fullUrl(url);\n        const option:RequestInit=this.defualtOption(url);\n        const {token}=DataCache.instance.token();\n\n        option.method=Method.POST;\n        const headers=new Headers({\n            \"Content-Type\":ContentType.JSON\n        });\n        if(token){\n            headers.set(\"Authorization\",token);\n        }\n        option.headers=headers;\n        option.body=JSON.stringify(data);\n\n        return fetch(url,option)\n                .then<ServerResponse<R>>(this.transform)\n                .then<HttpResponse<R>>(this.responseData)\n                .catch<HttpResponse<R>>(this.errorResponse);\n    }\n\n    /**\n     * 上传文件或图片处理\n     * @param url 链接地址\n     * @param data 传递数据\n     */\n    upload<R, P = {}>(url: string, data?: P): Promise<R> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * 获取完整的链接地址（不以http开头，使用全局服务地址补全）\n     * @param url 链接地址\n     */\n    fullUrl(url:string){\n        return (!url\n                ||url.startsWith(\"http:\")\n                ||url.startsWith(\"https:\"))\n                    ?url\n                    :(process.env.REACT_APP_SERVER_DOMAIN+url);\n    }\n\n    /**\n     * 生成请求的Option设置\n     * @param url 链接地址,判断是否HTTPS\n     */\n    private defualtOption(url:string):RequestInit{\n        return {\n            cache:\"no-cache\",\n            credentials:(url.startsWith(\"https:\")?\"include\":\"omit\"),\n            mode:\"cors\",\n            redirect: \"follow\",\n            referrerPolicy: \"no-referrer\"\n        };\n    }\n\n    /**\n     * 判断网络状态码，进行错误跳转\n     * @param response 请求返回内容\n     */\n    private transform<R>(response:Response):Promise<ServerResponse<R>>{\n        //网络状态错误\n        if(!response.ok){\n            const history = createHashHistory();\n            switch(response.status){\n                case 404:\n                    history.push(\"/public/error404\");\n                    break;\n                case 403:\n                    history.push(\"/public/error403\");\n                    break;\n                case 500:\n                default:\n                    history.push(\"/public/error500\");\n            }\n            throw new Error(`出现网络错误！状态码:${response.status},错误内容：${response.statusText}.`);\n        }\n        return response.json();\n    }\n\n    /**\n     * 解析服务端返回的Json内容，并生成Web端通用的处理对象\n     * @param response \n     */\n    private responseData<R>(response:ServerResponse<R>):Promise<HttpResponse<R>>{\n        return new Promise<HttpResponse<R>>((resolve, reject)=>resolve({\n            success:response.code===0,\n            data:response.data,\n            message:response.msg\n        }));\n    }\n\n    /**\n     * 返回错误信息\n     * @param error 错误\n     */\n    private errorResponse<R>(error:Error):Promise<HttpResponse<R>>{\n        return new Promise<HttpResponse<R>>((resolve, reject)=>reject({\n            success:false,\n            message:error.message\n        }));\n    }\n}"]},"metadata":{},"sourceType":"module"}