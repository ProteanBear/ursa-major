import React, {ChangeEvent, MouseEvent, KeyboardEvent } from 'react';
import Container from '../../components/Container';
import { Breadcrumb,Icon,Typography, Button, Form, Input,Tooltip,Card, Col, Empty, Modal, Result } from 'antd';
import { withRouter} from 'react-router-dom';
import { HttpResponse, HttpRequest } from '../../app/Request';
import { AppComponentProps, ApplyType, ApplyContent, ApplyStep} from '../../app/Model';
import { DataCache } from '../../app/DataCache';
import ImageViewer from '../../components/ImageViewer';

/**
 * 执业申请：业务选择页面
 */
class Switch extends React.Component<AppComponentProps>{
    /**
     * 状态设置：
     * inputSerialNumber（填写的申请单号）
     * modalVisible:错误提示框是否显示
     */
    readonly state:{
        inputSerialNumber:string,
        modalVisible:boolean,
        modalErrorMessage:string,
        loading:{
            continueEdit:boolean,
            applyRecord:boolean,
            applyLicense:boolean
        },
        serialNumberExist:boolean
    }={
        inputSerialNumber:"",
        modalVisible:false,
        modalErrorMessage:"",
        loading:{
            continueEdit:false,
            applyRecord:false,
            applyLicense:false
        },
        serialNumberExist:true
    }

    /**
     * 页面布局
     */
    render(){
        const {Title,Paragraph}=Typography;
        const {Meta}=Card;

        return (
            <Container>
                <Breadcrumb className="breadcrumb">
                    <Breadcrumb.Item><Icon type="file-text"/><span>执业申请</span></Breadcrumb.Item>
                    <Breadcrumb.Item><span>选择办理业务类型</span></Breadcrumb.Item>
                </Breadcrumb>

                <Title level={4} className="title-with-underline">继续填写上次的申请</Title>
                <Form layout="inline" style={{marginTop:16}}>
                    <Form.Item 
                        label={
                            <span>
                                申请单号&nbsp;
                                <Tooltip title="申请时提供的申请单号！">
                                    <Icon type="info-circle" />
                                </Tooltip>
                            </span>
                        }
                        hasFeedback
                        validateStatus={this.state.loading.continueEdit?"validating":(this.state.serialNumberExist?"":"error")}
                        help={this.state.serialNumberExist?"":"填写的申请单号不存在！"}
                    >
                        <Input placeholder="请输入" style={{width:"300px"}}
                            value={this.state.inputSerialNumber}
                            onChange={this.applyContinueEditOnChange}
                            onKeyPress={this.applyContinueEditFromInputEnter}
                        />
                    </Form.Item>
                    <Form.Item>
                        <Button type="primary" 
                            onClick={this.applyContinueEdit}
                            disabled={""===this.state.inputSerialNumber}
                            loading={this.state.loading.continueEdit}
                        >{this.state.loading.continueEdit?"正在获取":"继续填写"}</Button>
                    </Form.Item>
                </Form>
                    
                <Title level={4} className="title-with-underline">或创建新的申请</Title>
                <Col span={12}>
                    <Card hoverable
                        style={{ width: 300,margin:"10px auto"}}
                        cover={<Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description="暂无图片" />}
                        actions={[
                            <Button type="primary" 
                                loading={this.state.loading.applyRecord}
                                onClick={this.applyCreateRecord}
                            >{this.state.loading.applyRecord?"正在处理":"申请备案"}</Button>
                        ]}
                    >
                        <Meta title="备案" description="适合机构：诊所" />
                    </Card>
                </Col>
                <Col span={12}>
                    <Card hoverable
                        style={{ width: 300,margin:"10px auto"}}
                        cover={<Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description="暂无图片" />}
                        actions={[
                            <Button type="primary" 
                                loading={this.state.loading.applyLicense}
                                onClick={this.applyCreateLicense}
                            >{this.state.loading.applyLicense?"正在处理":"申请许可"}</Button>
                        ]}
                    >
                        <Meta title="许可" description="适合机构：二级及二级以上机构" />
                    </Card>
                </Col>
                <Col span={10} offset={7} className="section-prompt">
                    <Paragraph ellipsis={{ rows: 3, expandable: true }}>
                        <b>说明</b>：提示内容暂无！
                    </Paragraph>
                </Col>

                {/* 错误提示框 */}
                <Modal
                    title=""
                    visible={this.state.modalVisible}
                    footer={null}
                    onCancel={()=>{this.setState({modalVisible:false})}}
                    >
                    <Result
                        status="error"
                        title="操作失败"
                        subTitle={this.state.modalErrorMessage}
                    ></Result>
                </Modal>
            </Container>
        );
    }

    /**
     * 继续填写单号内容变化时，判断是否内容为空
     */
    applyContinueEditOnChange=(e:ChangeEvent<HTMLInputElement>)=>{
        this.setState({
            inputSerialNumber:e.target.value
        });
    }

    /**
     * 录入单号回车事件
     */
    applyContinueEditFromInputEnter=(event:KeyboardEvent)=>{
        if(this.state.inputSerialNumber===""){
            this.setState({serialNumberExist:true});
            return;
        }
        if(!event||event.key!=="Enter") return;
        this.applyContinueEdit();
    }

    /**
     * 继续编写申请内容
     */
    applyContinueEdit=async ()=>{
        //请求中
        this.setState({loading:{continueEdit:true}});
        const serialNumber=this.state.inputSerialNumber;

        type applyExistResponseData={exist:boolean,commit:boolean,applyType:number};
        const applyExist:HttpResponse<applyExistResponseData>=
            await ((new HttpRequest()).get<applyExistResponseData>(
                `webapi/apply/existApplyNo?applyNo=${serialNumber}`
            ));
        //获取出错
        if(!applyExist.success){
            this.setState({
                modalVisible:true,
                modalErrorMessage:applyExist.message,
                loading:{
                    continueEdit:false
                }
            });
        }

        const exist=applyExist.data&&applyExist.data.exist;
        this.setState({
            loading:{
                continueEdit:false,
            },
            serialNumberExist:exist
        });

        //存在，进入编辑页面
        if(exist&&applyExist.data){
            const applyType=ApplyType.create(applyExist.data.applyType);
            const defaultRoute=applyType===ApplyType.RECORD
                ?ApplyStep.RECORD_COMMITMENT.routePath(serialNumber)
                :ApplyStep.LICENSE_COMMITMENT.routePath(serialNumber);
            //如果在审核中，进入结果页面
            if(applyExist.data.commit){
                this.props.history.push(defaultRoute);
            }
            //如果在编写中，进入编辑步骤页面
            else{
                const applyEditCached=DataCache.instance.edit(serialNumber);
                this.props.history.push(applyEditCached
                    ?applyEditCached.step.routePath(serialNumber)
                    :defaultRoute
                );
            }
        }
    }

    /**
     * 点击图片全屏查看流程图
     */
    viewImage=(event:MouseEvent<HTMLImageElement>)=>{
        const img=(event.target as HTMLImageElement);
        ImageViewer.view([img],0);
    }

    /**
     * 创建备案申请
     */
    applyCreateRecord=async ()=>{
        // 请求中
        this.setState({loading:{applyRecord:true}});
        
        //获取申请单号
        try{
            const {applyNo}=await this.requestCreateApply(ApplyType.RECORD);
            this.props.history.push(`/public/record/step-commitment/${applyNo}`);
        }
        catch(error){}
    }

    /**
     * 创建许可申请
     */
    applyCreateLicense=async ()=>{
        // 请求中
        this.setState({loading:{applyLicense:true}});
        
        //获取申请单号
        try{
            const {applyNo}=await this.requestCreateApply(ApplyType.LICENSE);
            this.props.history.push(`/public/license/step-commitment/${applyNo}`);
        }
        catch(error){}
    }

    /**
     * 发起请求创建申请单
     */
    private requestCreateApply=async (type:ApplyType):Promise<ApplyContent>=>{
        const createdApply:HttpResponse<ApplyContent>=
            await ((new HttpRequest()).get<ApplyContent>(
                `webapi/apply/applyNo?applyType=${type.key}`
            ));
        //创建失败
        if(!createdApply.success){
            this.setState({
                modalVisible:true,
                modalErrorMessage:createdApply.message,
                loading:{
                    continueEdit:false,
                    applyRecord:false,
                    applyLicense:false
                }
            });
            throw new Error(createdApply.message);
        }
        return new Promise<ApplyContent>(
            (resolve, reject)=>resolve(createdApply.data)
        );
    }
}
export default withRouter((Form.create({name:"pageSwitch"})(Switch)) as any);