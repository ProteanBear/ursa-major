{"ast":null,"code":"import { createHashHistory } from 'history';\nimport { DataCache } from './DataCache';\n\n/**请求方式 */\nvar Method;\n/**数据格式类型 */\n\n(function (Method) {\n  Method[\"GET\"] = \"GET\";\n  Method[\"HEAD\"] = \"HEAD\";\n  Method[\"POST\"] = \"POST\";\n  Method[\"PUT\"] = \"PUT\";\n  Method[\"PATCH\"] = \"PATCH\";\n  Method[\"DELETE\"] = \"DELETE\";\n})(Method || (Method = {}));\n\nvar ContentType;\n/**\n * 服务器返回的内容\n */\n\n(function (ContentType) {\n  ContentType[\"JSON\"] = \"application/json;charset=UTF-8\";\n  ContentType[\"Form\"] = \"application/x-www-form-urlencoded; charset=UTF-8\";\n  ContentType[\"Multipart\"] = \"multipart/form-data; charset=utf-8; boundary=__X_YZWJ_BOUNDARY__\";\n  ContentType[\"File\"] = \"application/octet-stream\";\n})(ContentType || (ContentType = {}));\n\n/**\n * Http请求\n */\nexport class HttpRequest {\n  /**\n   * 获取完整的链接地址（不以http开头，使用全局服务地址补全）\n   * @param url 链接地址\n   */\n  static fullUrl(url) {\n    return !url || url.startsWith(\"http:\") || url.startsWith(\"https:\") ? url : (\"true\" === process.env.REACT_APP_USE_MOCK ? process.env.REACT_APP_SERVER_DOMAIN_MOCK : process.env.REACT_APP_SERVER_DOMAIN) + url;\n  }\n  /**\n   * 为url增加参数\n   * @param url \n   * @param key \n   * @param value \n   */\n\n\n  static addUrlParameter(url, key, value) {\n    return url + (url.indexOf(\"?\") === -1 ? \"?\".concat(key, \"=\").concat(value) : \"&\".concat(key, \"=\").concat(value));\n  }\n  /**\n   * 发送GET请求\n   * @param url 链接地址\n   * @param parameters 传递参数\n   */\n\n\n  get(url, page) {\n    url = HttpRequest.fullUrl(url);\n    const option = this.defualtOption(url);\n\n    const _DataCache$instance$t = DataCache.instance.token(),\n          token = _DataCache$instance$t.token; // 增加分页参数\n\n\n    if (page) {\n      url = HttpRequest.addUrlParameter(url, \"pageIndex\", String(page.index));\n      url = HttpRequest.addUrlParameter(url, \"pageSize\", String(page.size));\n    }\n\n    if (token) {\n      option.headers = new Headers({\n        \"Authorization\": token\n      });\n    }\n\n    option.method = Method.GET;\n    return fetch(url, option).then(this.transform).then(response => this.responseData(response, page)).catch(this.errorResponse);\n  }\n  /**\n   * 发送POST请求\n   * @param url 链接地址\n   * @param data 传递数据\n   */\n\n\n  post(url, data) {\n    url = HttpRequest.fullUrl(url);\n    const option = this.defualtOption(url);\n\n    const _DataCache$instance$t2 = DataCache.instance.token(),\n          token = _DataCache$instance$t2.token;\n\n    option.method = Method.POST;\n    const headers = new Headers({\n      \"Content-Type\": ContentType.JSON\n    });\n\n    if (token) {\n      headers.append(\"Authorization\", token);\n    }\n\n    option.headers = headers;\n\n    if (\"true\" === process.env.REACT_APP_USE_MOCK) {\n      option.body = JSON.stringify({\n        code: 0,\n        data: data\n      });\n    } else option.body = JSON.stringify(data);\n\n    return fetch(url, option).then(this.transform).then(this.responseData).catch(this.errorResponse);\n  }\n  /**\n   * 上传文件或图片处理\n   * @param url 链接地址\n   * @param file 上传文件\n   * @param fileParameterName 文件参数名称，默认为file\n   * @param commonParams 其他参数\n   */\n\n\n  upload(url, file, fileParameterName = \"file\", commonParams) {\n    url = HttpRequest.fullUrl(url);\n    const option = this.defualtOption(url);\n\n    const _DataCache$instance$t3 = DataCache.instance.token(),\n          token = _DataCache$instance$t3.token;\n\n    const formData = new FormData();\n\n    if (commonParams) {\n      for (const key in commonParams) {\n        if (commonParams.hasOwnProperty(key)) {\n          formData.append(key, String(commonParams[key]));\n        }\n      }\n    }\n\n    formData.append(fileParameterName, file);\n    option.method = Method.POST;\n    const headers = new Headers();\n\n    if (token) {\n      headers.append(\"Authorization\", token);\n    }\n\n    option.headers = headers;\n    option.body = formData;\n    return fetch(url, option).then(this.transform).then(this.responseData).then(response => {\n      if (\"true\" === process.env.REACT_APP_USE_MOCK) {\n        return new HttpRequest().get(\"webapi/comm/uploadFile-result?error=\".concat(url.indexOf(\"error\") !== -1 ? \"true\" : \"false\"));\n      }\n\n      return response;\n    }).catch(this.errorResponse);\n  }\n  /**\n   * 生成请求的Option设置\n   * @param url 链接地址,判断是否HTTPS\n   */\n\n\n  defualtOption(url) {\n    return {\n      cache: \"no-cache\",\n      credentials: url.startsWith(\"https:\") ? \"include\" : \"omit\",\n      mode: \"cors\",\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\"\n    };\n  }\n  /**\n   * 判断网络状态码，进行错误跳转\n   * @param response 请求返回内容\n   */\n\n\n  transform(response) {\n    //网络状态错误\n    if (!response.ok) {\n      const history = createHashHistory();\n\n      switch (response.status) {\n        case 404:\n          history.push(\"/public/error404\");\n          break;\n\n        case 403:\n          history.push(\"/public/error403\");\n          break;\n\n        case 500:\n        default:\n          history.push(\"/public/error500\");\n      }\n\n      throw new Error(\"\\u51FA\\u73B0\\u7F51\\u7EDC\\u9519\\u8BEF\\uFF01\\u72B6\\u6001\\u7801:\".concat(response.status, \",\\u9519\\u8BEF\\u5185\\u5BB9\\uFF1A\").concat(response.statusText, \".\"));\n    }\n\n    return response.json();\n  }\n  /**\n   * 解析服务端返回的Json内容，并生成Web端通用的处理对象\n   * @param response \n   */\n\n\n  responseData(response, page) {\n    const responseData = {\n      success: response.code === 0,\n      data: response.data,\n      message: response.msg\n    }; // 加入总数返回\n\n    if (response.count && page) {\n      page.total = response.count;\n      responseData.pageConfig = page;\n    }\n\n    return new Promise((resolve, reject) => resolve(responseData));\n  }\n  /**\n   * 返回错误信息\n   * @param error 错误\n   */\n\n\n  errorResponse(error) {\n    return new Promise((resolve, reject) => reject({\n      success: false,\n      message: error.message\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/maqiang/编程/yzwj-recorder-web/src/app/Request.ts"],"names":["createHashHistory","DataCache","Method","ContentType","HttpRequest","fullUrl","url","startsWith","process","env","REACT_APP_USE_MOCK","REACT_APP_SERVER_DOMAIN_MOCK","REACT_APP_SERVER_DOMAIN","addUrlParameter","key","value","indexOf","get","page","option","defualtOption","instance","token","String","index","size","headers","Headers","method","GET","fetch","then","transform","response","responseData","catch","errorResponse","post","data","POST","JSON","append","body","stringify","code","upload","file","fileParameterName","commonParams","formData","FormData","hasOwnProperty","cache","credentials","mode","redirect","referrerPolicy","ok","history","status","push","Error","statusText","json","success","message","msg","count","total","pageConfig","Promise","resolve","reject","error"],"mappings":"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","sourcesContent":["import {createHashHistory} from 'history';\nimport { DataCache } from './DataCache';\nimport { object } from 'prop-types';\n\n/**请求方式 */\nenum Method{\n    GET=\"GET\",HEAD=\"HEAD\",\n    POST=\"POST\",PUT=\"PUT\",PATCH=\"PATCH\",\n    DELETE=\"DELETE\"\n}\n\n/**数据格式类型 */\nenum ContentType{\n    JSON=\"application/json;charset=UTF-8\",\n    Form=\"application/x-www-form-urlencoded; charset=UTF-8\",\n    Multipart=\"multipart/form-data; charset=utf-8; boundary=__X_YZWJ_BOUNDARY__\",\n    File=\"application/octet-stream\"\n}\n\n/**\n * 服务器返回的内容\n */\ninterface ServerResponse<R>{\n    code:number,\n    data?:R,\n    msg:string,\n    count:number\n}\n\n/**\n * 分页配置\n */\nexport interface PageConfig{\n    /**页码，从1开始 */\n    index:number;\n    /**每页的数量 */\n    size:number;\n    /**数据总数 */\n    total?:number;\n}\n\n/**\n * 定义接口返回类型\n */\nexport interface HttpResponse<R>{\n    success:boolean,\n    data?:R,\n    message?:string,\n    pageConfig?:PageConfig\n}\n\n/**\n * Http请求\n */\nexport class HttpRequest{\n    /**\n     * 获取完整的链接地址（不以http开头，使用全局服务地址补全）\n     * @param url 链接地址\n     */\n    static fullUrl(url:string){\n        return (!url\n                ||url.startsWith(\"http:\")\n                ||url.startsWith(\"https:\"))\n                    ?url\n                    :((\"true\"===process.env.REACT_APP_USE_MOCK\n                        ?process.env.REACT_APP_SERVER_DOMAIN_MOCK\n                        :process.env.REACT_APP_SERVER_DOMAIN\n                    )+url);\n    }\n\n    /**\n     * 为url增加参数\n     * @param url \n     * @param key \n     * @param value \n     */\n    private static addUrlParameter(url:string,key:string,value:string){\n        return (url+(url.indexOf(\"?\")===-1?`?${key}=${value}`:`&${key}=${value}`));\n    }\n\n    /**\n     * 发送GET请求\n     * @param url 链接地址\n     * @param parameters 传递参数\n     */\n    get<R>(url: string,page?:PageConfig): Promise<HttpResponse<R>> {\n        url=HttpRequest.fullUrl(url);\n        const option:RequestInit=this.defualtOption(url);\n        const {token}=DataCache.instance.token();\n\n        // 增加分页参数\n        if(page){\n            url=HttpRequest.addUrlParameter(url,\"pageIndex\",String(page.index));\n            url=HttpRequest.addUrlParameter(url,\"pageSize\",String(page.size));\n        }\n\n        if(token){\n            option.headers=new Headers({\n                \"Authorization\":token\n            })\n        }\n\n        option.method=Method.GET;\n        return fetch(url,option)\n                .then<ServerResponse<R>>(this.transform)\n                .then<HttpResponse<R>>((response)=>this.responseData(response,page))\n                .catch<HttpResponse<R>>(this.errorResponse);\n    } \n    \n    /**\n     * 发送POST请求\n     * @param url 链接地址\n     * @param data 传递数据\n     */\n    post<R, P = {}>(url: string, data?: P): Promise<HttpResponse<R>> {\n        url=HttpRequest.fullUrl(url);\n        const option:RequestInit=this.defualtOption(url);\n        const {token}=DataCache.instance.token();\n\n        option.method=Method.POST;\n        const headers=new Headers({\n            \"Content-Type\":ContentType.JSON\n        });\n        if(token){\n            headers.append(\"Authorization\",token);\n        }\n        option.headers=headers;\n\n        if(\"true\"===process.env.REACT_APP_USE_MOCK){\n            option.body=JSON.stringify({\n                code:0,\n                data:data\n            });\n        }else option.body=JSON.stringify(data);\n\n        return fetch(url,option)\n                .then<ServerResponse<R>>(this.transform)\n                .then<HttpResponse<R>>(this.responseData)\n                .catch<HttpResponse<R>>(this.errorResponse);\n    }\n\n    /**\n     * 上传文件或图片处理\n     * @param url 链接地址\n     * @param file 上传文件\n     * @param fileParameterName 文件参数名称，默认为file\n     * @param commonParams 其他参数\n     */\n    upload<R, P extends Object>(url: string,file:File,fileParameterName:string=\"file\",commonParams?:P): Promise<HttpResponse<R>> {\n        url=HttpRequest.fullUrl(url);\n        const option:RequestInit=this.defualtOption(url);\n        const {token}=DataCache.instance.token();\n        \n        const formData=new FormData();\n        if(commonParams){\n            for (const key in commonParams) {\n                if (commonParams.hasOwnProperty(key)) {\n                    formData.append(key,String(commonParams[key]));\n                }\n            }\n        }\n        formData.append(fileParameterName,file);\n\n        option.method=Method.POST;\n        const headers=new Headers();\n        if(token){\n            headers.append(\"Authorization\",token);\n        }\n        option.headers=headers;\n        option.body=formData;\n\n        return fetch(url,option)\n                .then<ServerResponse<R>>(this.transform)\n                .then<HttpResponse<R>>(this.responseData)\n                .then<HttpResponse<R>>((response)=>{\n                    if(\"true\"===process.env.REACT_APP_USE_MOCK){\n                        return (new HttpRequest())\n                            .get(`webapi/comm/uploadFile-result?error=${url.indexOf(\"error\")!==-1?\"true\":\"false\"}`);\n                    }\n                    return response;\n                })\n                .catch<HttpResponse<R>>(this.errorResponse);\n    }\n\n    /**\n     * 生成请求的Option设置\n     * @param url 链接地址,判断是否HTTPS\n     */\n    private defualtOption(url:string):RequestInit{\n        return {\n            cache:\"no-cache\",\n            credentials:(url.startsWith(\"https:\")?\"include\":\"omit\"),\n            mode:\"cors\",\n            redirect: \"follow\",\n            referrerPolicy: \"no-referrer\"\n        };\n    }\n\n    /**\n     * 判断网络状态码，进行错误跳转\n     * @param response 请求返回内容\n     */\n    private transform<R>(response:Response):Promise<ServerResponse<R>>{\n        //网络状态错误\n        if(!response.ok){\n            const history = createHashHistory();\n            switch(response.status){\n                case 404:\n                    history.push(\"/public/error404\");\n                    break;\n                case 403:\n                    history.push(\"/public/error403\");\n                    break;\n                case 500:\n                default:\n                    history.push(\"/public/error500\");\n            }\n            throw new Error(`出现网络错误！状态码:${response.status},错误内容：${response.statusText}.`);\n        }\n        return response.json();\n    }\n\n    /**\n     * 解析服务端返回的Json内容，并生成Web端通用的处理对象\n     * @param response \n     */\n    private responseData<R>(response:ServerResponse<R>,page?:PageConfig):Promise<HttpResponse<R>>{\n        const responseData:HttpResponse<R>={\n            success:response.code===0,\n            data:response.data,\n            message:response.msg,\n        };\n        // 加入总数返回\n        if(response.count&&page){\n            page.total=response.count;\n            responseData.pageConfig=page;\n        }\n\n        return new Promise<HttpResponse<R>>((resolve, reject)=>resolve(responseData));\n    }\n\n    /**\n     * 返回错误信息\n     * @param error 错误\n     */\n    private errorResponse<R>(error:Error):Promise<HttpResponse<R>>{\n        return new Promise<HttpResponse<R>>((resolve, reject)=>reject({\n            success:false,\n            message:error.message\n        }));\n    }\n}"]},"metadata":{},"sourceType":"module"}