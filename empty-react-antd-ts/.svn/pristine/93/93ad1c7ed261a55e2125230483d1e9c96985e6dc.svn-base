import React from 'react';
import { Breadcrumb,Icon,Typography, Button,Divider,Col, Form, Input, Select,Radio, Upload, Row, notification, Modal, message, Cascader, Alert } from 'antd';

import Container, { ContainerLoading } from '../../components/Container';
import {ApplySectionLicenseStep, ApplySectionPrompt} from '../../components/ApplyHeader';
import {DictionaryData,DictionaryLoader} from '../../app/DictionaryLoader';
import { ApplyFormMedical, ApplyFormMedicalType,ApplyFormMedicalTypeContext } from '../../components/ApplyFormMedical';
import { ApplyStep, AppComponentProps, ApplyContentOrganization, PageError500, ApplyInspectContent, ApplyContentEquipment } from '../../app/Model';
import { UploadFile, UploadProps } from 'antd/lib/upload/interface';
import { HttpRequest } from '../../app/Request';
import ApplyUtils from '../../utils/ApplyUtils';
import InteractionUtils from '../../utils/InteractionUtils';
import ImageViewer from '../../components/ImageViewer';
import { Link } from 'react-router-dom';

const addressPrefix="四川省成都市高新区";

/**
 * 许可流程：第二步，机构信息
 */
class LicenseOrganization extends React.Component<AppComponentProps>{
    readonly state:{
        /**申请单号 */
        serialNumber:string;
        /**保存按钮是否请求中 */
        loading:boolean;
        /**是否已经保存 */
        saved:boolean;
        /**文件上传验证错误 */
        hasFileValidateError:boolean;
        /**申请内容 */
        data?:ApplyContentOrganization;
        /**上传文件中 */
        uploading:{
            [key:string]:boolean
        };
        /**上传文件列表 */
        fileList:{
            [key:string]:Array<UploadFile>
        };
        /**上传是否成功 */
        uploadSuccess:{
            [key:string]:boolean
        };
        /**上传的数量限制 */
        uploadLimit:{
            [key:string]:number
        };
        /**弹出信息提示 */
        alert:{
            show:boolean,
            title:string,
            description:string
        };
        /**是否上传的营业证书，false为上传的核名通知书 */
        isLicense:boolean;
    }={
        serialNumber:this.props.match.params.id,
        loading:false,
        saved:true,
        hasFileValidateError:false,
        uploading:{
            "license":false,
            "named":false,
            "building":false,
            "outdoor":false,
        },
        fileList:{
            "license":[],
            "named":[],
            "building":[],
            "outdoor":[],
        },
        uploadSuccess:{
            "license":true,
            "named":true,
            "building":true,
            "outdoor":true,
        },
        uploadLimit:{
            "license":20,
            "named":20,
            "building":20,
            "outdoor":20
        },
        alert:{show:false,title:"",description:""},
        isLicense:false,
    }

    /**
     * 上传组件配置：图片
     */
    private readonly uploadPhotoConfig:UploadProps={
        accept:".jpg,.png",
        listType:"picture-card",
        className:"avatar-uploader",
        showUploadList:true,
    }

    /**
     * 页面布局
     */
    render(){
        //未载入数据时
        if(!this.state.data){
            return (
                <ContainerLoading />
            );
        }

        const {Title,Text}=Typography;
        const {Option}=Select;
        const {getFieldDecorator} = this.props.form;

        const content=this.state.data;
        const dictionary=DictionaryLoader.instance;
        const street:Array<DictionaryData>=dictionary.street();
        const subjection:Array<DictionaryData>=dictionary.subjection();
        const ownership:Array<DictionaryData>=dictionary.ownership();
        const serviceObject:Array<DictionaryData>=dictionary.serviceObject();
        const serviceMode:Array<DictionaryData>=dictionary.serviceMode();
        const category:Array<DictionaryData>=dictionary.category();

        return (
            <Container needLogin={false}>
                {/* 标题 */}
                <Breadcrumb className="breadcrumb">
                <Breadcrumb.Item>
                    <Link to="/public">
                        <Icon type="file-text"/>&nbsp;
                        <span>执业申请</span>
                    </Link>
                </Breadcrumb.Item>
                <Breadcrumb.Item><span>许可</span></Breadcrumb.Item>
                </Breadcrumb>
                <Title level={4} className="title-with-underline">许可申请</Title>

                {/* 顶部 */}
                <ApplySectionPrompt serialNumber={this.state.serialNumber} 
                    deadline={this.state.data.effectiveTimeStr} />
                <ApplySectionLicenseStep {...ApplyStep.LICENSE_ORGANIZATION} />
                <Divider><span className="title-inner">第二步：机构信息</span></Divider>

                {/* 表单：基本信息 */}
                <Col span={22} offset={1}>
                    <h4 className="title-form-sub">基本信息</h4>
                    <Form layout="vertical">
                        <Row>
                            <Col span={15}>
                                <Form.Item label="机构名称">{
                                    getFieldDecorator("name",{
                                        initialValue:content.name,
                                        rules:[
                                            {required:true,message:"机构名称不能为空！"}
                                        ]
                                    })(
                                        <Input name="name" placeholder="请输入" 
                                            onChange={this.inputOnChange} 
                                            disabled={this.state.loading}
                                        />
                                    )}
                                </Form.Item>
                            </Col>
                            <Col span={8} offset={1}>
                                <Form.Item label="所属街道">{
                                    getFieldDecorator("street",{
                                        initialValue:(""===content.street?undefined:content.street),
                                        rules:[
                                            {required:true,message:"必须选择所属的街道！"}
                                        ]
                                    })(
                                        <Select showSearch
                                            placeholder="选择机构所属的（高新区）街道"
                                            optionFilterProp="children"
                                            filterOption={(input, option:React.ReactElement) =>
                                                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
                                            }
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                        >
                                            {street.map((data:DictionaryData,index:number)=>{
                                                return (<Option key={data.value}>{data.label}</Option>);
                                            })}
                                        </Select>
                                    )}
                                </Form.Item>
                            </Col>
                        </Row>
                        <Row>
                            <Col span={7}>
                                <Form.Item label="机构地址" help="请输入详细的地址">
                                    <div className="input-group">
                                        <Col span={8}><Input value="四川省" disabled/></Col>
                                        <Col span={8}><Input value="成都市" disabled/></Col>
                                        <Col span={8}><Input value="高新区" disabled/></Col>
                                        <Col span={24}>{
                                            getFieldDecorator("address",{
                                                initialValue:content.address.replace(addressPrefix,""),
                                                rules:[
                                                    {required:true,message:"机构地址不能为空！"}
                                                ]
                                            })(
                                                <Input.TextArea rows={3} style={{maxHeight:73}} 
                                                    onChange={this.inputOnChange} 
                                                    disabled={this.state.loading}
                                                />
                                            )
                                        } 
                                        </Col>
                                    </div>
                                </Form.Item>
                            </Col>
                            <Col span={7} offset={1}>
                                <Form.Item label="所有制形式">{
                                    getFieldDecorator("ownership",{
                                        initialValue:(""===content.ownership?undefined:content.ownership),
                                        rules:[
                                            {required:true,message:"必须选择所有制形式"}
                                        ]
                                    })(
                                        <Select showSearch
                                            placeholder="请选择"
                                            optionFilterProp="children"
                                            filterOption={(input, option:React.ReactElement) =>
                                                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
                                            }
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                        >
                                            {ownership.map((data:DictionaryData,index:number)=>{
                                                return (<Option key={data.value}>{data.label}</Option>);
                                            })}
                                        </Select>
                                    )}
                                </Form.Item>
                                <Form.Item label="电话号码">{
                                    getFieldDecorator("tel",{
                                        initialValue:content.tel,
                                        rules:[
                                            {required:true,message:"电话号码不能为空！"}
                                        ]
                                    })(
                                        <Input placeholder="请输入" 
                                            disabled={this.state.loading}
                                            onChange={this.inputOnChange}
                                        />
                                    )}
                                </Form.Item>
                            </Col>
                            <Col span={8} offset={1}>
                                <Form.Item label="隶属关系">{
                                    getFieldDecorator("membership",{
                                        initialValue:(""===content.membership?undefined:content.membership),
                                        rules:[
                                            {required:true,message:"必须选择隶属关系！"}
                                        ]
                                    })(
                                        <Select showSearch
                                            placeholder="请选择"
                                            optionFilterProp="children"
                                            filterOption={(input, option:React.ReactElement) =>
                                                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
                                            }
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                        >
                                            {subjection.map((data:DictionaryData,index:number)=>{
                                                return (<Option key={data.value}>{data.label}</Option>);
                                            })}
                                        </Select>
                                    )}
                                </Form.Item>
                                <Form.Item label="邮政编码">{
                                    getFieldDecorator("post",{
                                        initialValue:content.post,
                                        rules:[
                                            {required:true,message:"邮政编码不能为空！"}
                                        ]
                                    })(
                                        <Input placeholder="请输入" 
                                            disabled={this.state.loading}
                                            onChange={this.inputOnChange}
                                        />
                                    )}
                                </Form.Item>
                            </Col>
                        </Row>
                        <Row>
                            <Col span={7}>
                                <Form.Item label="统一社会信用代码">{
                                    getFieldDecorator("onlyCode",{
                                        initialValue:content.onlyCode,
                                        rules:[
                                            {required:false},
                                            {min:18,message:"统一社会信用代码不能少于18位！"},
                                        ]
                                    })(
                                        <Input placeholder="请输入" 
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                        />
                                    )}
                                </Form.Item>
                            </Col>
                            <Col span={7} offset={1}>
                                <Form.Item label="服务对象">{
                                    getFieldDecorator("serviceObj",{
                                        initialValue:(""===content.serviceObj?undefined:content.serviceObj),
                                        rules:[
                                            {required:true,message:"服务对象选择不能为空！"}
                                        ]
                                    })(
                                        <Select showSearch
                                            placeholder="请选择"
                                            optionFilterProp="children"
                                            filterOption={(input, option:React.ReactElement) =>
                                                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
                                            }
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                        >
                                            {serviceObject.map((data:DictionaryData,index:number)=>{
                                                return (<Option key={data.value}>{data.label}</Option>);
                                            })}
                                        </Select>
                                    )}
                                </Form.Item>
                            </Col>
                            <Col span={8} offset={1}>
                                <Form.Item label="服务方式">{
                                    getFieldDecorator("serviceTypeArray",{
                                        initialValue:(""===content.serviceType?undefined:content.serviceType.split(",")),
                                        rules:[
                                            {required:true,message:"服务方式选择不能为空！"}
                                        ]
                                    })(
                                        <Select showSearch mode="multiple"
                                            placeholder="请选择"
                                            optionFilterProp="children"
                                            filterOption={(input, option:React.ReactElement) =>
                                                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
                                            }
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                        >
                                            {serviceMode.map((data:DictionaryData,index:number)=>{
                                                return (<Option key={data.value}>{data.label}</Option>);
                                            })}
                                        </Select>
                                    )}
                                </Form.Item>
                            </Col>
                        </Row>
                        <Row>
                            <Col span={7}>
                                <Form.Item label="机构类别">{
                                    getFieldDecorator("orgTypeSelect",{
                                        initialValue:(""===content.orgType?undefined:dictionary.categoryParentArray(content.orgType)),
                                        rules:[
                                            {required:true,message:"机构类别选择不能为空！"}
                                        ]
                                    })(
                                        <Cascader 
                                            options={category} placeholder="请选择" 
                                            disabled={this.state.loading}
                                            onChange={this.inputOnChange}
                                        />
                                    )}
                                </Form.Item>
                            </Col>
                            <Col span={16} offset={1}>
                                <Form.Item label="经营性质">{
                                    getFieldDecorator("natureOperation",{
                                        initialValue:(""===content.natureOperation?"营利性":content.natureOperation),
                                        rules:[
                                            {required:false}
                                        ]
                                    })(
                                        <Radio.Group onChange={this.inputOnChange} disabled={this.state.loading}>
                                            <Radio value="营利性">营利性</Radio>
                                            <Radio value="非营利性">非营利性</Radio>
                                            <Radio value="其他">其他</Radio>
                                        </Radio.Group>
                                    )}
                                </Form.Item>
                            </Col>
                        </Row>
                        <Row>
                            <Col span={7}>
                                <Form.Item label="核定床位数">{
                                    getFieldDecorator("approvedBedNum",{
                                        initialValue:content.approvedBedNum,
                                        rules:[
                                            {required:true,message:"核定床位数不能为空！"},
                                            {pattern:/^(\d+)$/,message:"床位数必须为数字！"}
                                        ]
                                    })(
                                        <Input placeholder="请输入" 
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                            suffix="个"/>
                                    )}
                                </Form.Item>
                            </Col>
                            <Col span={7} offset={1}>
                                <Form.Item label="观察床位数">{
                                    getFieldDecorator("observedBedNum",{
                                        initialValue:content.observedBedNum,
                                        rules:[
                                            {required:true,message:"观察床位数不能为空！"},
                                            {pattern:/^(\d+)$/,message:"床位数必须为数字！"}
                                        ]
                                    })(
                                        <Input placeholder="请输入" 
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                            suffix="个"/>
                                    )}
                                </Form.Item>
                            </Col>
                            <Col span={8} offset={1}>
                                <Form.Item label="牙科诊椅数">{
                                    getFieldDecorator("chairsDentalNum",{
                                        initialValue:content.chairsDentalNum,
                                        rules:[
                                            {required:true,message:"牙科诊椅数不能为空！"},
                                            {pattern:/^(\d+)$/,message:"床位数必须为数字！"}
                                        ]
                                    })(
                                        <Input placeholder="请输入" 
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                            suffix="个"/>
                                    )}
                                </Form.Item>
                            </Col>
                        </Row>
                        <Row>
                            <Col span={7}>
                                <Form.Item label="占地面积">{
                                    getFieldDecorator("ownArea",{
                                        initialValue:content.ownArea,
                                        rules:[
                                            {required:false},
                                            {pattern:/^(\d+)((\.(\d+))*)$/,message:"占地面积必须为数字！"}
                                        ]
                                    })(
                                        <Input placeholder="请输入" 
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                            suffix="平米"/>
                                    )}
                                </Form.Item>
                            </Col>
                            <Col span={7} offset={1}>
                                <Form.Item label="建筑面积">{
                                    getFieldDecorator("structureArea",{
                                        initialValue:content.structureArea,
                                        rules:[
                                            {required:false},
                                            {pattern:/^(\d+)((\.(\d+))*)$/,message:"占地面积必须为数字！"}
                                        ]
                                    })(
                                        <Input placeholder="请输入" 
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                            suffix="平米"/>
                                    )}
                                </Form.Item>
                            </Col>
                            <Col span={8} offset={1}>
                                <Form.Item label="建筑面积中业务用房面积">{
                                    getFieldDecorator("bizArea",{
                                        initialValue:content.bizArea,
                                        rules:[
                                            {required:false},
                                            {pattern:/^(\d+)((\.(\d+))*)$/,message:"占地面积必须为数字！"}
                                        ]
                                    })(
                                        <Input placeholder="请输入" 
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                            suffix="平米"/>
                                    )}
                                </Form.Item>
                            </Col>
                        </Row>
                        <Row>
                            <Col span={7}>
                                <Form.Item label="资金总额">{
                                    getFieldDecorator("totalCapital",{
                                        initialValue:content.totalCapital,
                                        rules:[
                                            {required:false},
                                            {pattern:/^(\d+)((\.(\d+))*)$/,message:"占地面积必须为数字！"}
                                        ]
                                    })(
                                        <Input placeholder="请输入" 
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                            suffix="万元"/>
                                    )}
                                </Form.Item>
                            </Col>
                            <Col span={7} offset={1}>
                                <Form.Item label="固定资金">{
                                    getFieldDecorator("fixedCapital",{
                                        initialValue:content.fixedCapital,
                                        rules:[
                                            {required:true,message:"固定资金不能为空！"},
                                            {pattern:/^(\d+)((\.(\d+))*)$/,message:"占地面积必须为数字！"}
                                        ]
                                    })(
                                        <Input placeholder="请输入" 
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                            suffix="万元"/>
                                    )}
                                </Form.Item>
                            </Col>
                            <Col span={8} offset={1}>
                                <Form.Item label="注册资金">{
                                    getFieldDecorator("registeredCapital",{
                                        initialValue:content.registeredCapital,
                                        rules:[
                                            {required:true,message:"注册资金不能为空！"},
                                            {pattern:/^(\d+)((\.(\d+))*)$/,message:"占地面积必须为数字！"}
                                        ]
                                    })(
                                        <Input placeholder="请输入" 
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                            suffix="万元"/>
                                    )}
                                </Form.Item>
                            </Col>
                        </Row>
                        <Row>
                            <Col span={15}>
                            <Form.Item label="备注">{
                                getFieldDecorator("remark",{
                                    initialValue:content.remark,
                                    rules:[
                                        {required:false},
                                        {max:1000,message:"内容限制在1000字以内！"},
                                    ]
                                })(
                                    <Input.TextArea rows={7} style={{maxHeight:160}} 
                                        onChange={this.inputOnChange} 
                                        disabled={this.state.loading}
                                    />
                                )}
                            </Form.Item>
                            </Col>
                            <Col span={8} offset={1}>
                                <Form.Item label="流动资金">{
                                    getFieldDecorator("liquidity",{
                                        initialValue:content.liquidity,
                                        rules:[
                                            {required:true,message:"流动资金不能为空！"}
                                        ]
                                    })(
                                        <Input placeholder="请输入" 
                                            onChange={this.inputOnChange}
                                            disabled={this.state.loading}
                                            suffix="万元"/>
                                    )}
                                </Form.Item>
                            </Col>
                        </Row>
                    </Form>
                </Col>

                {/* 表单：诊疗范围 */}
                <Col span={22} offset={1}>
                    <h4 className="title-form-sub">
                        诊疗范围
                        <Text type="secondary" style={{fontSize:13}}>（至少选中一项）</Text>
                    </h4>
                    <ApplyFormMedicalTypeContext.Provider value={{type:ApplyFormMedicalType.FULL}}>
                        <ApplyFormMedical 
                            scope={this.state.data.diagnosisSubjectCode} 
                            onChange={this.scopeChangeHandler}
                            disabled={this.state.loading}
                        />
                    </ApplyFormMedicalTypeContext.Provider>
                </Col>

                {/* 表单：上传内容 */}
                <Col span={22} offset={1}>
                    <h4 className="title-form-sub">上传内容</h4>
                    <Form labelCol={{span:24}} wrapperCol={{span:24}}>
                        <Row>
                            <Col span={24}>
                                <Form.Item className={`${this.state.isLicense?"license":"named"}-photos must-upload`}
                                    label={
                                        <span>
                                            营业执照或核名通知书：&nbsp;
                                            <Radio.Group value={this.state.isLicense?1:2}
                                                onChange={(event)=>{
                                                    const target=event.target;
                                                    this.setState({...this.state,isLicense:(target.value===1),saved:false});
                                                }} 
                                                disabled={this.state.loading}
                                            >
                                                <Radio value={1}>营业执照</Radio>
                                                <Radio value={2}>核名通知书</Radio>
                                            </Radio.Group>
                                        </span>
                                    }
                                    validateStatus={
                                        !this.state.hasFileValidateError
                                            ?(this.state.isLicense?(this.state.uploadSuccess.license?"":"error"):(this.state.uploadSuccess.named?"":"error"))
                                            :(this.state.isLicense?(this.state.fileList.license.length>0?"":"error"):(this.state.fileList.named.length>0?"":"error"))
                                    }
                                    help={
                                        !this.state.hasFileValidateError
                                            ?((this.state.isLicense?(this.state.uploadSuccess.license):(this.state.uploadSuccess.named))?"支持扩展名：.jpg .png":"图片上传失败！")
                                            :((this.state.isLicense?(this.state.fileList.license.length>0):(this.state.fileList.named.length>0))?"支持扩展名：.jpg .png":"必须上传此图片！")
                                    }>
                                        <Upload {...this.uploadPhotoConfig}
                                            name={this.state.isLicense?"license":"named"}
                                            customRequest={(fileObject:object)=>{
                                                this.uploadFileOrPhoto(fileObject,(this.state.isLicense?"license":"named"));
                                            }}
                                            onRemove={(file:UploadFile)=>{
                                                this.uploadFileOrPhotoRemove(file,(this.state.isLicense?"license":"named"))
                                            }}
                                            onPreview={(file:UploadFile)=>{
                                                this.uploadPhotoPreview(file,(this.state.isLicense?"license":"named"))
                                            }}
                                            fileList={this.state.isLicense?this.state.fileList.license:this.state.fileList.named}
                                            disabled={this.state.loading||(this.state.isLicense?this.state.uploading.license:this.state.uploading.named)}
                                        >
                                            {(this.state.isLicense
                                                ?(this.state.uploadLimit.license>this.state.fileList.license.length)
                                                :(this.state.uploadLimit.named>this.state.fileList.named.length)
                                            )
                                            ?(
                                                <div>
                                                    <Icon type={(this.state.isLicense?this.state.uploading.license:this.state.uploading.named)?"loading":"plus"} />
                                                    <div className="ant-upload-text">{(this.state.isLicense?this.state.uploading.license:this.state.uploading.named)?"上传中..":"上传"}</div>
                                                </div>
                                            )
                                            :null}
                                        </Upload>
                                </Form.Item>
                            </Col>
                        </Row>
                        <Row>
                            <Col span={12}>
                                <Form.Item className="building-photos must-upload"
                                    label="房屋平面布局图" 
                                    validateStatus={
                                        !this.state.hasFileValidateError
                                            ?(this.state.uploadSuccess.building?"":"error")
                                            :(this.state.fileList.building.length>0?"":"error")
                                    }
                                    help={
                                        !this.state.hasFileValidateError
                                            ?(this.state.uploadSuccess.building?"支持扩展名：.jpg .png":"图片上传失败！")
                                            :(this.state.fileList.building.length>0?"支持扩展名：.jpg .png":"必须上传此图片！")
                                    }
                                    >
                                        <Upload {...this.uploadPhotoConfig}
                                            name="building"
                                            customRequest={(fileObject:object)=>{
                                                this.uploadFileOrPhoto(fileObject,"building");
                                            }}
                                            onRemove={(file:UploadFile)=>{
                                                this.uploadFileOrPhotoRemove(file,"building")
                                            }}
                                            onPreview={(file:UploadFile)=>{
                                                this.uploadPhotoPreview(file,"building")
                                            }}
                                            fileList={this.state.fileList.building}
                                            disabled={this.state.loading||this.state.uploading.building}
                                        >
                                            {this.state.uploadLimit.building>this.state.fileList.building.length
                                            ?(
                                                <div>
                                                    <Icon type={this.state.uploading.building?"loading":"plus"} />
                                                    <div className="ant-upload-text">{this.state.uploading.building?"上传中..":"上传"}</div>
                                                </div>
                                            )
                                            :null}
                                        </Upload>
                                </Form.Item>
                            </Col>
                            <Col span={12}>
                            <Form.Item className="building-photos must-upload"
                                    label="外景图" 
                                    validateStatus={
                                        !this.state.hasFileValidateError
                                            ?(this.state.uploadSuccess.outdoor?"":"error")
                                            :(this.state.fileList.outdoor.length>0?"":"error")
                                    }
                                    help={
                                        !this.state.hasFileValidateError
                                            ?(this.state.uploadSuccess.outdoor?"支持扩展名：.jpg .png":"图片上传失败！")
                                            :(this.state.fileList.outdoor.length>0?"支持扩展名：.jpg .png":"必须上传此图片！")
                                    }
                                    >
                                        <Upload {...this.uploadPhotoConfig}
                                            name="outdoor"
                                            customRequest={(fileObject:object)=>{
                                                this.uploadFileOrPhoto(fileObject,"outdoor");
                                            }}
                                            onRemove={(file:UploadFile)=>{
                                                this.uploadFileOrPhotoRemove(file,"outdoor")
                                            }}
                                            onPreview={(file:UploadFile)=>{
                                                this.uploadPhotoPreview(file,"outdoor")
                                            }}
                                            fileList={this.state.fileList.outdoor}
                                            disabled={this.state.loading||this.state.uploading.outdoor}
                                        >
                                            {this.state.uploadLimit.outdoor>this.state.fileList.outdoor.length
                                            ?(
                                                <div>
                                                    <Icon type={this.state.uploading.outdoor?"loading":"plus"} />
                                                    <div className="ant-upload-text">{this.state.uploading.outdoor?"上传中..":"上传"}</div>
                                                </div>
                                            )
                                            :null}
                                        </Upload>
                                </Form.Item>
                            </Col>
                        </Row>
                    </Form>
                </Col>
            
                {/* 提示信息 */}
                {(this.state.alert.show)?(
                    <Col span={12} offset={6} style={{marginTop:10}}>
                        <Alert 
                            message={this.state.alert.title}
                            description={this.state.alert.description}
                            type="error" showIcon
                        />
                    </Col>
                ):null}
                
            
                {/* 按钮 */}
                <Col span={24} className="section-buttons">
                    <Button onClick={this.prevStep}>上一步</Button>
                    <Button type="primary" 
                        onClick={this.saveAndNext}
                        loading={this.state.loading}
                    >
                        保存并进入下一步
                    </Button>
                </Col>
            </Container>
        );
    }

    /**
     * 组件完成后请求获取申请信息
     */
    async componentDidMount(){
        // 获取申请内容
        const applyResponse=await ((new HttpRequest()).get<ApplyContentOrganization>(
                `webapi/apply/getRecordInfo?applyNo=${this.state.serialNumber}`
            ));

        // 失败跳转500
        if(!applyResponse.success||!applyResponse.data){
            this.props.history.push(PageError500);
            return;
        }

        // 不可编辑跳转审核结果
        const {applyStatus}=applyResponse.data;
        if(!ApplyUtils.canEdit(applyStatus)){
            this.props.history.push(ApplyStep.LICENSE_RESULT.routePath(this.state.serialNumber));
            return;
        }

        // 处理文件路径拆分
        let {license,named,building,outdoor}=this.state.fileList;
        license=ApplyUtils.urlStringToUploadArray(
            license,applyResponse.data.businessLicense
        );
        named=ApplyUtils.urlStringToUploadArray(
            named,applyResponse.data.nameVerification
        );
        building=ApplyUtils.urlStringToUploadArray(
            building,applyResponse.data.orgFlatImg
        );
        outdoor=ApplyUtils.urlStringToUploadArray(
            outdoor,applyResponse.data.orgOutImg
        );

        // 设置显示
        this.setState({
            ...this.state,
            data:applyResponse.data,
            fileList:{
                license:license,
                named:named,
                building:building,
                outdoor:outdoor,
            },
            isLicense:(""!==applyResponse.data.businessLicense),
        });

        // 添加窗口关闭监听
        InteractionUtils.addWindowCloseListener((event:Event)=>{
            if(this.state.saved)    event.preventDefault();
            else                    event.returnValue=true;
        });

        // 审核被驳回，获取驳回理由
        if(ApplyUtils.needLoadReject(applyStatus)){
            const rejectArrayResponse=await ((new HttpRequest()).get<Array<ApplyInspectContent>>(
                `webapi/apply/auditOpinion?applyNo=${this.state.serialNumber}`
            ));

            // 失败
            if(!rejectArrayResponse.success||!rejectArrayResponse.data){
                return;
            }

            // 找到最新的拒绝内容
            let rejectContent:ApplyInspectContent|null=null;
            for(let l=rejectArrayResponse.data.length,i=l-1;i>-1;i--){
                const current=rejectArrayResponse.data[i];
                if(ApplyUtils.inspectIsReject(current.status)){
                    rejectContent=current;
                    break;
                }
            }

            //通知显示拒绝理由
            if(!rejectContent) return;
            notification["warning"]({
                message:"申请被驳回！",
                description:rejectContent.opinion
            });
        }
    }

    /**
     * 卸载时删除窗口关闭监听
     */
    componentWillUnmount(){
        InteractionUtils.removeWindowCloseListener();
    }

    /**
     * 输入信息修改，设置是否保存为false
     */
    inputOnChange=()=>{
        this.setState({
            ...this.state,
            saved:false
        });
    }

    /**
     * 提供给子组件进行调用，修改机构中的设备信息列表
     */
    equipmentChangeHandler=(equipments:Array<ApplyContentEquipment>)=>{
        if(!this.state.data) return;
        
        this.setState({
            ...this.state,
            saved:false,
            data:{
                ...this.state.data,
                equipments:equipments
            }
        });
    }

    /**
     * 提供给子组件进行调用，诊疗范围修改
     */
    scopeChangeHandler=(scope:string,description:string)=>{
        if(!this.state.data) return;
        
        this.setState({
            ...this.state,
            saved:false,
            data:{
                ...this.state.data,
                diagnosisSubjectCode:scope,
                diagnosisSubjectName:description
            }
        });
    }

    /**
     * 上传文件或者图片
     */
    uploadFileOrPhoto=async (fileObject:object,key:string)=>{
        // 上传文件或图片
        const option=fileObject as {file:File};
        const uploadResponse=await (new HttpRequest())
            .upload<{url:string},{applyNo:string}>
            (
                `webapi/comm/uploadFile`,
                option.file,
                "file",
                {applyNo:this.state.serialNumber}
            );
        const {uploadSuccess}=this.state;
        uploadSuccess[key]=(uploadResponse.success&&(uploadResponse.data!==null));
        
        //上传失败显示
        if(!uploadSuccess[key]||!uploadResponse.data){
            this.setState({
                ...this.state,
                uploadSuccess:uploadSuccess
            });
            return;
        }

        //上传成功，设置已上传列表
        const {fileList}=this.state;
        fileList[key].push({
            uid:String(fileList[key].length),
            name:option.file.name,
            size:0,
            type:"",
            url:uploadResponse.data.url
        });
        this.setState({
            ...this.state,
            uploadSuccess:uploadSuccess,
            saved:false,
            fileList:fileList
        });
    }

    /**
     * 全屏查看上传的图片
     */
    uploadPhotoPreview=(uploadFile:UploadFile,key:string)=>{
        // 获取全部上传的图片元素
        const row=document.querySelector<HTMLDivElement>(`.${key}-photos`);
        if(!row) return;
        const imgArray=row.querySelectorAll<HTMLImageElement>
            (".ant-upload-list-item-image");
        const imageList:Array<HTMLImageElement>=[];

        let currentIndex=0;
        imgArray.forEach((img,index)=>{
            imageList.push(img);
            currentIndex=(index===Number(uploadFile.uid)?index:currentIndex);
        });

        ImageViewer.view(imageList,currentIndex);
    }

    /**
     * 删除上传的文件或图片
     */
    uploadFileOrPhotoRemove=(file:UploadFile,key:string)=>{
        const {confirm}=Modal;
        const {fileList}=this.state;
        confirm({
            title: '确定要删除当前上传的图片么？',
            okText: '继续删除',
            okType: 'danger',
            cancelText: '取消',
            onOk:()=>{
                fileList[key].splice(fileList[key].findIndex(item=>item.uid===file.uid),1);
                this.setState({
                    ...this.state,
                    saved:false,
                    fileList:fileList
                });
            },
        });
    }

    /**
     * 上一步
     */
    prevStep=()=>{
        const toPrevStep=()=>{
            notification.destroy();
            InteractionUtils.scrollToTop();
            this.props.history.push(ApplyStep.LICENSE_COMMITMENT.routePath(this.state.serialNumber));
        };

        if(!this.state.saved){
            Modal.confirm({
                title: "确定要离开这里么?",
                content:"未保存的信息将会丢失！",
                okText:"继续离开",
                cancelText:"取消",
                onOk() {toPrevStep()},
            });
            return;
        }
        
        toPrevStep();
    }

    /**
     * 保存后并进入下一步
     */
    saveAndNext=()=>{
        //基础信息表单校验
        this.props.form.validateFieldsAndScroll(async (error,values)=>{
            this.setState({...this.state,alert:{show:false}});
            if(!this.state.data) return;
            if(!error){
                //诊疗范围选择校验
                if(this.state.data.diagnosisSubjectCode===""){
                    message.error("验证错误！请至少选中一个诊疗范围！");
                    return;
                }

                //上传文件或图片验证
                const {fileList}=this.state;
                let hasError=false;
                for (const key in fileList) {
                    if (fileList.hasOwnProperty(key)){
                        if(this.state.isLicense&&key==="named") continue;
                        if(!this.state.isLicense&&key==="license") continue;
                        if(fileList[key].length<1){
                            hasError=true;
                            break;
                        }
                    }
                }
                if(hasError){
                    this.setState({
                        ...this.state,
                        hasFileValidateError:true
                    });
                    return;
                }  
                
                // 发起保存请求
                this.setState({...this.state,loading:true});
                values.address=(addressPrefix+values.address);
                values.orgType=values.orgTypeSelect[2];
                values.serviceType=values.serviceTypeArray.join(",");
                if(this.state.isLicense){
                    values.businessLicense=ApplyUtils.uploadArrayToUrlString(fileList.license);
                }
                else{
                    values.nameVerification=ApplyUtils.uploadArrayToUrlString(fileList.named);
                }
                const saveResponse=await ((new HttpRequest()).post<any,ApplyContentOrganization>(
                    "webapi/apply/saveRecordInfo",
                    {
                        ...values,
                        applyNo:this.state.serialNumber,
                        diagnosisSubjectCode:this.state.data.diagnosisSubjectCode,
                        diagnosisSubjectName:this.state.data.diagnosisSubjectName,
                        orgFlatImg:ApplyUtils.uploadArrayToUrlString(fileList.building),
                        orgOutImg:ApplyUtils.uploadArrayToUrlString(fileList.outdoor),
                    }
                ));

                //请求失败显示错误信息
                if(!saveResponse.success){
                    this.setState({
                        ...this.state,
                        loading:false,
                        alert:{
                            show:true,
                            title:"保存失败",
                            description:saveResponse.message
                        }
                    });
                    return;
                }

                //成功后转入下一步
                this.setState({...this.state,loading:false});
                notification.destroy();
                InteractionUtils.scrollToTop();
                this.props.history.push(ApplyStep.LICENSE_MANAGER.routePath(this.state.serialNumber));
            }
        });
    }
}
export default Form.create({name:"licenseOrganization"})(LicenseOrganization);