{"ast":null,"code":"import { DataCache } from \"./DataCache\";\nimport { HttpRequest } from \"./Request\";\n\n/**\n * 登录校验器：通过读取本地存储中的Token记录，\n * 并通过访问服务端校验token是否过期，\n * 判断用户是否已经登录。\n */\nexport class LoginChecker {\n  /**\n   * 检查用户是否已经登录；\n   * 首先访问本地存储检查是否有token保存，\n   * 包含Token则向服务端请求，检查Token有效性，\n   * token有效返回本地存储的用户信息；无效，则返回null\n   */\n  async loginUser(useRemoteCheck = false) {\n    const _DataCache$instance$t = DataCache.instance.token(),\n          token = _DataCache$instance$t.token,\n          data = _DataCache$instance$t.data;\n\n    const falsePromise = new Promise(resolve => resolve({\n      isLogin: false\n    }));\n    if (!token) return falsePromise; // 未强制使用远程服务端校验，则直接返回已登录\n\n    if (!useRemoteCheck) {\n      return new Promise(resolve => resolve(data ? data : {\n        isLogin: true\n      }));\n    } // 强制使用远程服务器校验\n\n\n    const checkLogin = await new HttpRequest().get(\"webapi/login/checkToken\");\n    if (!checkLogin.success) return falsePromise;\n    return new Promise(resolve => resolve({\n      isLogin: true\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/maqiang/编程/yzwj-recorder-web/src/app/LoginChecker.ts"],"names":["DataCache","HttpRequest","LoginChecker","loginUser","useRemoteCheck","instance","token","data","falsePromise","Promise","resolve","isLogin","checkLogin","get","success"],"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA0C,WAA1C;;AAGA;;;;;AAKA,OAAO,MAAMC,YAAN,CAAkB;AACrB;;;;;;AAMA,QAAMC,SAAN,CAAgBC,cAAsB,GAAC,KAAvC,EAAkE;AAAA,kCAC3CJ,SAAS,CAACK,QAAV,CAAmBC,KAAnB,EAD2C;AAAA,UACvDA,KADuD,yBACvDA,KADuD;AAAA,UACjDC,IADiD,yBACjDA,IADiD;;AAE9D,UAAMC,YAAY,GAAC,IAAIC,OAAJ,CACdC,OAAD,IAAWA,OAAO,CAAC;AAACC,MAAAA,OAAO,EAAC;AAAT,KAAD,CADH,CAAnB;AAGA,QAAG,CAACL,KAAJ,EAAW,OAAOE,YAAP,CALmD,CAO9D;;AACA,QAAG,CAACJ,cAAJ,EAAmB;AACf,aAAO,IAAIK,OAAJ,CACFC,OAAD,IAAWA,OAAO,CAAEH,IAAI,GAACA,IAAD,GAAM;AAACI,QAAAA,OAAO,EAAC;AAAT,OAAZ,CADf,CAAP;AAGH,KAZ6D,CAc9D;;;AACA,UAAMC,UAA4B,GAC1B,MAAQ,IAAIX,WAAJ,EAAD,CAAoBY,GAApB,CAA6B,yBAA7B,CADf;AAEA,QAAG,CAACD,UAAU,CAACE,OAAf,EAAwB,OAAON,YAAP;AAExB,WAAO,IAAIC,OAAJ,CACFC,OAAD,IAAWA,OAAO,CAAC;AAACC,MAAAA,OAAO,EAAC;AAAT,KAAD,CADf,CAAP;AAGH;;AA7BoB","sourcesContent":["import { DataCache } from \"./DataCache\";\nimport { HttpRequest, HttpResponse } from \"./Request\";\nimport { LoginStatus } from \"./Model\";\n\n/**\n * 登录校验器：通过读取本地存储中的Token记录，\n * 并通过访问服务端校验token是否过期，\n * 判断用户是否已经登录。\n */\nexport class LoginChecker{\n    /**\n     * 检查用户是否已经登录；\n     * 首先访问本地存储检查是否有token保存，\n     * 包含Token则向服务端请求，检查Token有效性，\n     * token有效返回本地存储的用户信息；无效，则返回null\n     */\n    async loginUser(useRemoteCheck:boolean=false):Promise<LoginStatus>{\n        const {token,data}=DataCache.instance.token();\n        const falsePromise=new Promise<LoginStatus>(\n            (resolve)=>resolve({isLogin:false})\n        );\n        if(!token) return falsePromise;\n        \n        // 未强制使用远程服务端校验，则直接返回已登录\n        if(!useRemoteCheck){\n            return new Promise<LoginStatus>(\n                (resolve)=>resolve((data?data:{isLogin:true}))\n            );\n        }\n\n        // 强制使用远程服务器校验\n        const checkLogin:HttpResponse<any>=\n                await ((new HttpRequest()).get<any>(\"webapi/login/checkToken\"));\n        if(!checkLogin.success) return falsePromise;\n\n        return new Promise<LoginStatus>(\n            (resolve)=>resolve({isLogin:true})\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}