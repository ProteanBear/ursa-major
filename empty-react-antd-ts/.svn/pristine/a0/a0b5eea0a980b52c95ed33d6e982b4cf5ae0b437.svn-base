import { DataCache } from "./DataCache";
import { HttpRequest, HttpResponse } from "./Request";
import { LoginStatus } from "./Model";

/**
 * 登录校验器：通过读取本地存储中的Token记录，
 * 并通过访问服务端校验token是否过期，
 * 判断用户是否已经登录。
 */
export class LoginChecker{
    /**
     * 检查用户是否已经登录；
     * 首先访问本地存储检查是否有token保存，
     * 包含Token则向服务端请求，检查Token有效性，
     * token有效返回本地存储的用户信息；无效，则返回null
     */
    async loginUser(useRemoteCheck:boolean=false):Promise<LoginStatus>{
        const {token,data}=DataCache.instance.token();
        const falsePromise=new Promise<LoginStatus>(
            (resolve)=>resolve({isLogin:false})
        );
        if(!token) return falsePromise;
        
        // 未强制使用远程服务端校验，则直接返回已登录
        if(!useRemoteCheck){
            return new Promise<LoginStatus>(
                (resolve)=>resolve((data?data:{isLogin:true}))
            );
        }

        // 强制使用远程服务器校验
        const checkLogin:HttpResponse<any>=
                await ((new HttpRequest()).get<any>("webapi/login/checkToken"));
        if(!checkLogin.success) return falsePromise;

        return new Promise<LoginStatus>(
            (resolve)=>resolve({isLogin:true})
        );
    }
}