import React from 'react';
import Container, { ContainerLoading } from '../../components/Container';
import { Breadcrumb,Icon,Typography, Button, Divider, Col, Modal, Alert, notification, message } from 'antd';
import { ApplySectionPrompt, ApplySectionLicenseStep } from '../../components/ApplyHeader';
import ApplyFormLegal from '../../components/ApplyFormLegal';
import ApplyFormPrincipal from '../../components/ApplyFormPrincipal';
import ApplyFormContact from '../../components/ApplyFormContact';
import { Link, withRouter} from 'react-router-dom';
import { ApplyStep, AppComponentProps, ApplyContentExist, ApplyContentManager, PageError500, ApplyInspectContent, FormValidateResult } from '../../app/Model';
import { HttpRequest } from '../../app/Request';
import ApplyUtils from '../../utils/ApplyUtils';
import InteractionUtils from '../../utils/InteractionUtils';

/**
 * 许可流程：第三步，管理人员
 */
class LicenseManager extends React.Component<AppComponentProps>{
    readonly state:{
        /**申请单号 */
        serialNumber:string;
        /**保存按钮是否请求中 */
        loading:boolean;
        /**提交按钮是否请求中 */
        submiting:boolean;
        /**是否已经保存 */
        saved:boolean;
        /**文件上传验证错误 */
        hasFileValidateError:boolean;
        /**申请单基本信息 */
        apply?:ApplyContentExist,
        /**法人信息 */
        legal?:ApplyContentManager,
        /**负责人信息 */
        principal?:ApplyContentManager,
        /**联系人信息 */
        contact?:ApplyContentManager,
        /**弹出信息提示 */
        alert:{
            show:boolean,
            title:string,
            description:string
        }
    }={
        serialNumber:this.props.match.params.id,
        loading:false,
        submiting:false,
        saved:true,
        hasFileValidateError:false,
        alert:{show:false,title:"",description:""}
    };

    private legalFormRef:any=React.createRef();
    private principalFormRef:any=React.createRef();
    private contactFormRef:any=React.createRef();

    /**
     * 页面布局
     */
    render(){
        //未载入数据时
        if(!this.state.apply||!this.state.legal
            ||!this.state.principal||!this.state.contact){
            return (
                <ContainerLoading />
            );
        }

        const {Title}=Typography;

        return (
            <Container needLogin={false}>
                {/* 标题 */}
                <Breadcrumb className="breadcrumb">
                    <Breadcrumb.Item>
                        <Link to="/public">
                            <Icon type="file-text"/>&nbsp;
                            <span>执业申请</span>
                        </Link>
                    </Breadcrumb.Item>
                    <Breadcrumb.Item><span>许可</span></Breadcrumb.Item>
                </Breadcrumb>
                <Title level={4} className="title-with-underline">许可申请</Title>

                {/* 顶部 */}
                <ApplySectionPrompt serialNumber={this.state.serialNumber} 
                    deadline={this.state.apply.effectiveDate} />
                <ApplySectionLicenseStep {...ApplyStep.LICENSE_MANAGER} />
                <Divider><span className="title-inner">管理人员</span></Divider>
                
                {/* 表单：法人信息 */}
                <Col span={22} offset={1}>
                    <h4 className="title-form-sub">法人信息</h4>
                    <ApplyFormLegal wrappedComponentRef={(ref:any)=>this.legalFormRef=ref}
                        serialNumber={this.state.serialNumber}
                        manager={this.state.legal} 
                        disabled={this.state.loading||this.state.submiting}
                        onChange={this.personInforChangeHandler}
                    />
                </Col>

                {/* 表单：负责人信息 */}
                <Col span={22} offset={1}>
                    <h4 className="title-form-sub">负责人信息</h4>
                    <ApplyFormPrincipal wrappedComponentRef={(ref:any)=>this.principalFormRef=ref}
                        serialNumber={this.state.serialNumber}
                        manager={this.state.principal} 
                        disabled={this.state.loading||this.state.submiting}
                        onChange={this.personInforChangeHandler}
                    />
                </Col>

                {/* 表单：联系人信息 */}
                <Col span={22} offset={1}>
                    <h4 className="title-form-sub">联系人信息</h4>
                    <ApplyFormContact wrappedComponentRef={(ref:any)=>this.contactFormRef=ref}
                        serialNumber={this.state.serialNumber}
                        manager={this.state.contact} 
                        disabled={this.state.loading||this.state.submiting}
                        onChange={this.personInforChangeHandler}
                    />
                </Col>

                {/* 提示信息 */}
                {(this.state.alert.show)?(
                    <Col span={12} offset={6} style={{marginTop:10}}>
                        <Alert
                            message={this.state.alert.title}
                            description={this.state.alert.description}
                            type="error" showIcon
                        />
                    </Col>
                ):null}

                {/* 按钮 */}
                <Col span={24} className="section-buttons">
                    <Button onClick={this.prevStep}>上一步</Button>
                    <Button type="primary" 
                        onClick={this.saveAndNext}
                        loading={this.state.loading}
                    >
                        保存并进入下一步
                    </Button>
                </Col>
            </Container>
        );
    }

    /**
     * 组件载入后，载入数据信息（包括申请单信息和管理人员信息）
     */
    async componentDidMount(){
        //获取申请单信息
        const applyExistResponse=await ((new HttpRequest()).get<ApplyContentExist>(
                `webapi/apply/existApplyNo?applyNo=${this.state.serialNumber}`
            ));

        // 失败跳转500
        if(!applyExistResponse.success||!applyExistResponse.data){
            this.props.history.push(PageError500);
            return;
        }

        // 不可编辑跳转审核结果
        const {status}=applyExistResponse.data;
        if(!ApplyUtils.canEdit(status)){
            this.props.history.push(ApplyStep.LICENSE_RESULT.routePath(this.state.serialNumber));
            return;
        }

        // 获取管理人员信息
        const applyManagerResponse=await ((new HttpRequest()).get<Array<ApplyContentManager>>(
            `webapi/apply/managerPersonInfo?applyNo=${this.state.serialNumber}`
        ));
        // 失败跳转500
        if(!applyManagerResponse.success||!applyManagerResponse.data){
            this.props.history.push(PageError500);
            return;
        }

        // 遍历拆分管理人员为法人、负责人和联系人
        const {legal,principal,contact}=ApplyUtils.managerListToMap(
            this.state.serialNumber,applyManagerResponse.data
        );
        // 设置显示
        this.setState({
            ...this.state,
            apply:{
                ...applyExistResponse.data
            },
            legal:legal,
            principal:principal,
            contact:contact
        });

        // 添加窗口关闭监听
        InteractionUtils.addWindowCloseListener((event:Event)=>{
            if(this.state.saved)    event.preventDefault();
            else                    event.returnValue=true;
        });

        // 审核被驳回，获取驳回理由
        if(ApplyUtils.needLoadReject(applyExistResponse.data.status)){
            const rejectArrayResponse=await ((new HttpRequest()).get<Array<ApplyInspectContent>>(
                `webapi/apply/auditOpinion?applyNo=${this.state.serialNumber}`
            ));

            // 失败
            if(!rejectArrayResponse.success||!rejectArrayResponse.data){
                return;
            }

            // 找到最新的拒绝内容
            let rejectContent:ApplyInspectContent|null=null;
            for(let l=rejectArrayResponse.data.length,i=l-1;i>-1;i--){
                const current=rejectArrayResponse.data[i];
                if(ApplyUtils.inspectIsReject(current.status)){
                    rejectContent=current;
                    break;
                }
            }

            //通知显示拒绝理由
            if(!rejectContent) return;
            notification["warning"]({
                message:"申请被驳回！",
                description:rejectContent.opinion
            });
        }
    }

    /**
     * 卸载时删除窗口关闭监听
     */
    componentWillUnmount(){
        InteractionUtils.removeWindowCloseListener();
    }

    /**
     * 信息修改处理
     */
    personInforChangeHandler=()=>{
        this.setState({
            ...this.state,
            saved:false
        });
    };

    /**
     * 上一步
     */
    prevStep=()=>{
        const toPrevStep=()=>{
            notification.destroy();
            InteractionUtils.scrollToTop();
            this.props.history.push(ApplyStep.LICENSE_ORGANIZATION.routePath(this.state.serialNumber));
        };

        if(!this.state.saved){
            Modal.confirm({
                title: "确定要离开这里么?",
                content:"未保存的信息将会丢失！",
                okText:"继续离开",
                cancelText:"取消",
                onOk() {toPrevStep()},
            });
            return;
        }
        
        toPrevStep();
    }

    /**
     * 生成人员保存的内容
     */
    generateSaveStaff=async ()=>{
        // 验证法人输入内容
        const legal:FormValidateResult<ApplyContentManager>=
            await this.legalFormRef.validateFieldsAndScroll();
        if(legal.hasError&&legal.message!==""){
            message.error(legal.message);
            return null;
        }

        // 验证负责人输入内容
        const principal:FormValidateResult<ApplyContentManager>=
            await this.principalFormRef.validateFieldsAndScroll();
        if(principal.hasError&&principal.message!==""){
            message.error(principal.message);
            return null;
        }

        // 验证联系人输入内容
        const contact:FormValidateResult<ApplyContentManager>=
            await this.contactFormRef.validateFieldsAndScroll();
        if(contact.hasError&&contact.message!==""){
            message.error(contact.message);
            return null;
        }

        // 构建保存的内容
        return {
            applyNo:this.state.serialNumber,
            applyManagers:[legal,principal,contact],
        }
    }

    /**
     * 保存但不提交
     */
    saveAndNext=async ()=>{
        const savedData=await this.generateSaveStaff();
        if(!savedData) return;
        
        // 发起保存请求
        this.setState({...this.state,loading:true});
        const saveResponse=await ((new HttpRequest()).post<any,object>(
                "webapi/apply/savePersonInfo",
                savedData
            ));

        //请求失败显示错误信息
        if(!saveResponse.success){
            this.setState({
                ...this.state,
                loading:false,
                alert:{
                    show:true,
                    title:"保存失败",
                    description:saveResponse.message
                }
            });
            return;
        }

        this.setState({
            ...this.state,
            loading:false,
            saved:true,
            alert:{
                ...this.state.alert,
                show:false
            }
        });
        notification.destroy();
        InteractionUtils.scrollToTop();
        this.props.history.push(ApplyStep.LICENSE_STAFF.routePath(this.state.serialNumber));
    }
}
export default withRouter(LicenseManager);