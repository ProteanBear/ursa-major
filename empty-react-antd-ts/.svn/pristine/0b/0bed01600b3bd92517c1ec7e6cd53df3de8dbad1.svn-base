{"ast":null,"code":"import { ApplyContentManagerFactory } from \"../app/Model\";\n/**\n * 申请相关的方法\n */\n\nexport default class ApplyUtils {}\n\nApplyUtils.canEdit = status => status === 0 || status === 4;\n\nApplyUtils.needLoadReject = status => status === 4;\n\nApplyUtils.inspectIsReject = status => status === 1;\n\nApplyUtils.medicalScopeToSet = scope => {\n  const scopeArray = scope.split(\",\");\n  const result = new Set();\n  scopeArray.map(value => result.add(value));\n  return result;\n};\n\nApplyUtils.medicalScopeToString = scope => {\n  let result = \"\",\n      i = 0;\n  scope.forEach(val => {\n    result += (i++ === 0 ? \"\" : \",\") + val;\n  });\n  return result;\n};\n\nApplyUtils.medicalScopeParentCode = code => {\n  const index = code.indexOf(\".\");\n  if (index === -1) return null;\n  return code.substring(0, index);\n};\n\nApplyUtils.urlStringToUploadArray = (array, urls) => {\n  const urlArray = urls.split(\",\");\n  if (urlArray.length === 0 || urls === \"\") return array;\n  urlArray.map((url, index) => {\n    array.push({\n      uid: String(index),\n      name: url.substring(url.lastIndexOf(\"/\") + 1),\n      size: 0,\n      type: \"\",\n      url: url\n    });\n  });\n  return array;\n};\n\nApplyUtils.uploadArrayToUrlString = array => {\n  let result = \"\",\n      i = 0;\n  array.map(data => {\n    result += (i++ === 0 ? \"\" : \",\") + data.url;\n  });\n  return result;\n};\n\nApplyUtils.uploadArrayToNameSet = array => {\n  const result = new Set();\n  array.map(data => result.add(data.name));\n  return result;\n};\n\nApplyUtils.managerListToMap = (serialNumber, list) => {\n  let legal, principal, contact;\n  list.map(manager => {\n    switch (manager.type) {\n      case 1:\n        legal = manager;\n        break;\n\n      case 2:\n        principal = manager;\n        break;\n\n      case 3:\n        contact = manager;\n        break;\n\n      default:\n    }\n  });\n  legal = legal || ApplyContentManagerFactory.create(serialNumber, 1);\n  principal = principal || ApplyContentManagerFactory.create(serialNumber, 2);\n  contact = contact || ApplyContentManagerFactory.create(serialNumber, 3);\n  return {\n    legal: legal,\n    principal: principal,\n    contact: contact\n  };\n};","map":{"version":3,"sources":["/Users/maqiang/编程/yzwj-recorder-web/src/utils/ApplyUtils.ts"],"names":["ApplyContentManagerFactory","ApplyUtils","canEdit","status","needLoadReject","inspectIsReject","medicalScopeToSet","scope","scopeArray","split","result","Set","map","value","add","medicalScopeToString","i","forEach","val","medicalScopeParentCode","code","index","indexOf","substring","urlStringToUploadArray","array","urls","urlArray","length","url","push","uid","String","name","lastIndexOf","size","type","uploadArrayToUrlString","data","uploadArrayToNameSet","managerListToMap","serialNumber","list","legal","principal","contact","manager","create"],"mappings":"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","sourcesContent":["import { UploadFile } from \"antd/lib/upload/interface\";\nimport { ApplyContentManager, ApplyContentManagerFactory } from \"../app/Model\";\n\n/**\n * 申请相关的方法\n */\nexport default class ApplyUtils{\n    /**\n     * 申请的当前状态是否可编辑\n     * @param status 状态值\n     */\n    static canEdit=(status:number)=>(status===0||status===4);\n\n    /**\n     * 申请的当前状态是否需要获取驳回理由\n     * @param status 状态值\n     */\n    static needLoadReject=(status:number)=>(status===4);\n\n    /**\n     * 审核结果是否为驳回\n     */\n    static inspectIsReject=(status:number)=>(status===1);\n\n    /**\n     * 将字符串形式的已选择诊疗范围转换为Set\n     */\n    static medicalScopeToSet=(scope:string):Set<string>=>{\n        const scopeArray=scope.split(\",\");\n        const result=new Set<string>();\n        scopeArray.map(value=>result.add(value));\n        return result;\n    }\n\n    /**\n     * 将Set形式的已选择诊疗范围转换为字符串\n     */\n    static medicalScopeToString=(scope:Set<string>):string=>{\n        let result=\"\",i=0;\n        scope.forEach(val=>{\n            result+=((i++===0?\"\":\",\")+val);\n        });\n        return result;\n    };\n\n    /**\n     * 获取诊疗范围编码子级的父级编码\n     */\n    static medicalScopeParentCode=(code:string):string|null=>{\n        const index=code.indexOf(\".\")\n        if(index===-1) return null;\n        return code.substring(0,index);\n    }\n\n    /**\n     * 将路径（多个间逗号分隔）转换为上传文件对象列表\n     */\n    static urlStringToUploadArray=(array:Array<UploadFile>,urls:string)\n        :Array<UploadFile>=>{\n        const urlArray=urls.split(\",\");\n        if(urlArray.length===0||urls===\"\") return array;\n        urlArray.map((url,index)=>{\n            array.push({\n                uid:String(index),\n                name:url.substring(url.lastIndexOf(\"/\")+1),\n                size:0,\n                type:\"\",\n                url:url\n            });\n        });\n        return array;\n    }\n\n    /**\n     * 将上传文件列表转换为url字符串（多个之间逗号分隔）\n     */\n    static uploadArrayToUrlString=(array:Array<UploadFile>):string=>{\n        let result=\"\",i=0;\n        array.map((data)=>{\n            result+=((i++===0?\"\":\",\")+data.url);\n        });\n        return result;\n    }\n\n    /**\n     * 将上传文件列表转换为名称的Set，用于判断指定的文件是否存在\n     */\n    static uploadArrayToNameSet=(array:Array<UploadFile>):Set<string>=>{\n        const result=new Set<string>();\n        array.map(data=>result.add(data.name));\n        return result;\n    }\n\n    /**\n     * 将管理人员数组中的人员分解开;\n     * 不存在的创建为默认对象\n     */\n    static managerListToMap=(serialNumber:string,list:Array<ApplyContentManager>):{\n        legal:ApplyContentManager,\n        principal:ApplyContentManager,\n        contact:ApplyContentManager\n    }=>{\n        let legal,principal,contact;\n        list.map(manager=>{\n            switch(manager.type){\n                case 1:\n                    legal=manager;\n                    break;\n                case 2:\n                    principal=manager;\n                    break;\n                case 3:\n                    contact=manager;\n                    break;\n                default:\n            }\n        });\n\n        legal=legal||ApplyContentManagerFactory.create(serialNumber,1);\n        principal=principal||ApplyContentManagerFactory.create(serialNumber,2);\n        contact=contact||ApplyContentManagerFactory.create(serialNumber,3);\n        return {legal:legal,principal:principal,contact:contact};\n    }\n}"]},"metadata":{},"sourceType":"module"}