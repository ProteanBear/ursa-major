{"ast":null,"code":"import \"antd/es/checkbox/style/css\";\nimport _Checkbox from \"antd/es/checkbox\";\nimport \"antd/es/button/style/css\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/tooltip/style/css\";\nimport _Tooltip from \"antd/es/tooltip\";\nimport \"antd/es/form/style/css\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style/css\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/icon/style/css\";\nimport _Icon from \"antd/es/icon\";\nimport _objectSpread from \"/Users/maqiang/\\u7F16\\u7A0B/yzwj-recorder-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/maqiang/\\u7F16\\u7A0B/yzwj-recorder-web/src/components/LoginForAccount.tsx\";\nimport React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { LoginChecker } from '../app/LoginChecker';\nimport { DataCache, CacheMode } from '../app/DataCache';\nimport { HttpRequest } from '../app/Request';\n\n/**\n * 用户登录：使用机构账号登录表单\n */\nclass LoginForAccount extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      requesting: false,\n      imageBase64: undefined,\n      data: {\n        username: \"\",\n        password: \"\",\n        imgToken: \"\",\n        imgCode: \"\"\n      },\n      requestError: false,\n      autoLogin: true\n      /**\n       * 登录检查器\n       */\n\n    };\n    this.loginChecker = new LoginChecker();\n\n    this.loadVerifyCodeImage = async () => {\n      this.setState(_objectSpread({}, this.state, {\n        imageBase64: undefined,\n        loading: true\n      }));\n      const verifyCodeResponse = await new HttpRequest().get(\"webapi/login/getVerCodeImg\");\n\n      if (!verifyCodeResponse.success || !verifyCodeResponse.data) {\n        this.setState(_objectSpread({}, this.state, {\n          loadError: true,\n          loading: false\n        }));\n        return;\n      }\n\n      this.setState(_objectSpread({}, this.state, {\n        loadError: false,\n        loading: false,\n        imageBase64: verifyCodeResponse.data.img,\n        data: _objectSpread({}, this.state.data, {\n          imgToken: verifyCodeResponse.data.imgToken\n        })\n      }));\n    };\n\n    this.inputOnChange = (value, key) => {\n      const data = this.state.data;\n      data[key] = value;\n      this.setState(_objectSpread({}, this.state, {\n        data: data\n      }));\n    };\n\n    this.inputOnFocus = () => {\n      this.setState(_objectSpread({}, this.state, {\n        requestError: false\n      }));\n    };\n\n    this.autoLoginOnChange = event => {\n      this.setState(_objectSpread({}, this.state, {\n        autoLogin: event.target.checked\n      }));\n    };\n\n    this.keyDownLogin = event => {\n      if (event.key === \"Enter\") {\n        this.login();\n      }\n    };\n\n    this.login = async () => {\n      // 验证输入\n      const data = this.state.data;\n\n      if (data.username === \"\" || data.password === \"\" || data.imgCode === \"\") {\n        return;\n      } // 登录请求\n\n\n      this.setState(_objectSpread({}, this.state, {\n        requesting: true\n      }));\n      const loginResponse = await new HttpRequest().post(\"webapi/login/loginByAccount\", process.env.REACT_APP_USE_MOCK === \"true\" ? _objectSpread({}, data, {\n        token: \"sdjlksdjfkdlsfksdjflksdjfjlsdflksdflk\",\n        userId: 0,\n        userName: \"人员姓名\",\n        roleName: \"窗口人员\"\n      }) : data); // 登录失败\n\n      if (!loginResponse.success || !loginResponse.data) {\n        this.setState(_objectSpread({}, this.state, {\n          requesting: false,\n          requestError: true\n        }));\n        return;\n      } // 记录当前Token\n      // 勾选自动登录记录到LocalStorage中，未勾选记录到SessionStorage中\n\n\n      DataCache.instance.token(loginResponse.data.token, {\n        isLogin: true,\n        data: loginResponse.data\n      }, this.state.autoLogin ? CacheMode.LOCAL : CacheMode.SESSION); // 成功后进入主页\n\n      this.props.history.replace(\"/protected/organization\");\n    };\n  }\n\n  /**\n   * 页面布局\n   */\n  render() {\n    const iconStyle = {\n      color: 'rgba(0,0,0,.25)'\n    };\n    const _this$state$data = this.state.data,\n          username = _this$state$data.username,\n          password = _this$state$data.password,\n          imgCode = _this$state$data.imgCode;\n    return React.createElement(_Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(_Form.Item, {\n      hasFeedback: true,\n      validateStatus: this.state.requestError ? \"error\" : undefined,\n      help: this.state.requestError ? \"登录失败，用户名或密码错误！\" : undefined,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      disabled: this.state.requesting,\n      prefix: React.createElement(_Icon, {\n        type: \"user\",\n        style: iconStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }),\n      placeholder: \"\\u673A\\u6784\\u8D26\\u6237\",\n      value: username,\n      onChange: event => this.inputOnChange(event.target.value, \"username\"),\n      onFocus: this.inputOnFocus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })), React.createElement(_Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(_Input.Password, {\n      disabled: this.state.requesting,\n      prefix: React.createElement(_Icon, {\n        type: \"lock\",\n        style: iconStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }),\n      placeholder: \"\\u767B\\u5F55\\u5BC6\\u7801\",\n      value: password,\n      onChange: event => this.inputOnChange(event.target.value, \"password\"),\n      onFocus: this.inputOnFocus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(_Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      disabled: this.state.requesting,\n      style: {\n        width: 220,\n        marginRight: 10\n      },\n      prefix: React.createElement(_Icon, {\n        type: \"credit-card\",\n        style: iconStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }),\n      placeholder: \"\\u8F93\\u5165\\u53F3\\u4FA7\\u7684\\u56FE\\u5F62\\u9A8C\\u8BC1\\u7801\",\n      value: imgCode,\n      onChange: event => this.inputOnChange(event.target.value, \"imgCode\"),\n      onFocus: this.inputOnFocus,\n      onKeyDown: this.keyDownLogin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), this.state.imageBase64 ? React.createElement(_Tooltip, {\n      placement: \"right\",\n      title: \"\\u770B\\u4E0D\\u6E05\\uFF1F\\u70B9\\u51FB\\u6362\\u4E00\\u5F20\\uFF01\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.imageBase64,\n      width: \"110\",\n      height: \"32\",\n      onClick: this.loadVerifyCodeImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })) : this.state.loadError ? React.createElement(_Button, {\n      type: \"link\",\n      style: {\n        width: 110\n      },\n      onClick: this.loadVerifyCodeImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"\\u91CD\\u65B0\\u8F7D\\u5165\") : React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        width: 110\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(_Icon, {\n      type: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), \"\\xA0\\u8F7D\\u5165\\u4E2D\")), React.createElement(_Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(_Checkbox, {\n      className: \"auto-login\",\n      checked: this.state.autoLogin,\n      disabled: this.state.requesting,\n      onChange: this.autoLoginOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"\\u81EA\\u52A8\\u767B\\u5F55\"), React.createElement(Link, {\n      className: \"apply\",\n      to: \"/public\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"\\u6267\\u4E1A\\u7533\\u8BF7\")), React.createElement(_Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(_Button, {\n      disabled: username === \"\" || password === \"\" || imgCode === \"\",\n      type: \"primary\",\n      onClick: this.login,\n      htmlType: \"button\",\n      className: \"button-submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"\\u767B \\u5F55\")));\n  }\n  /**\n   * 组件载入前检查是否已经登陆，以及上次编辑的状态\n   */\n\n\n  async componentWillMount() {\n    const _ref = await this.loginChecker.loginUser(),\n          isLogin = _ref.isLogin; //已登录：跳转到机构首页\n\n\n    if (isLogin) {\n      this.props.history.replace(\"/protected/organization\");\n      return;\n    } //未登录：检查是否有编辑申请\n\n\n    const editInfor = DataCache.instance.edit();\n\n    if (editInfor) {\n      const serialNumber = editInfor.serialNumber,\n            step = editInfor.step;\n\n      if (serialNumber) {\n        this.props.history.push(step.routePath(serialNumber));\n        return;\n      }\n    } // 未登录载入图形验证码\n\n\n    this.loadVerifyCodeImage();\n  }\n  /**\n   * 载入图形验证码\n   */\n\n\n}\n\nexport default withRouter(LoginForAccount);","map":{"version":3,"sources":["/Users/maqiang/编程/yzwj-recorder-web/src/components/LoginForAccount.tsx"],"names":["React","Link","withRouter","LoginChecker","DataCache","CacheMode","HttpRequest","LoginForAccount","Component","state","loading","requesting","imageBase64","undefined","data","username","password","imgToken","imgCode","requestError","autoLogin","loginChecker","loadVerifyCodeImage","setState","verifyCodeResponse","get","success","loadError","img","inputOnChange","value","key","inputOnFocus","autoLoginOnChange","event","target","checked","keyDownLogin","login","loginResponse","post","process","env","REACT_APP_USE_MOCK","token","userId","userName","roleName","instance","isLogin","LOCAL","SESSION","props","history","replace","render","iconStyle","color","width","marginRight","display","componentWillMount","loginUser","editInfor","edit","serialNumber","step","push","routePath"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkD,OAAlD;AACA,SAA6BC,IAA7B,EAAmCC,UAAnC,QAAqD,kBAArD;AAGA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,kBAArC;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAOA;;;AAGA,MAAMC,eAAN,SAA8BP,KAAK,CAACQ,SAApC,CAAmE;AAAA;AAAA;AAAA,SACtDC,KADsD,GAkB7D;AACEC,MAAAA,OAAO,EAAC,IADV;AAEEC,MAAAA,UAAU,EAAC,KAFb;AAGEC,MAAAA,WAAW,EAACC,SAHd;AAIEC,MAAAA,IAAI,EAAC;AACDC,QAAAA,QAAQ,EAAC,EADR;AAEDC,QAAAA,QAAQ,EAAC,EAFR;AAGDC,QAAAA,QAAQ,EAAC,EAHR;AAIDC,QAAAA,OAAO,EAAC;AAJP,OAJP;AAUEC,MAAAA,YAAY,EAAC,KAVf;AAWEC,MAAAA,SAAS,EAAC;AAGd;;;;AAdE,KAlB6D;AAAA,SAmCvDC,YAnCuD,GAmC1C,IAAIlB,YAAJ,EAnC0C;;AAAA,SAwJ/DmB,mBAxJ+D,GAwJ3C,YAAU;AAC1B,WAAKC,QAAL,mBAAkB,KAAKd,KAAvB;AAA6BG,QAAAA,WAAW,EAACC,SAAzC;AAAmDH,QAAAA,OAAO,EAAC;AAA3D;AACA,YAAMc,kBAAkB,GAAC,MAAQ,IAAIlB,WAAJ,EAAD,CAC3BmB,GAD2B,CACO,4BADP,CAAhC;;AAGA,UAAG,CAACD,kBAAkB,CAACE,OAApB,IAA6B,CAACF,kBAAkB,CAACV,IAApD,EAAyD;AACrD,aAAKS,QAAL,mBACO,KAAKd,KADZ;AAEIkB,UAAAA,SAAS,EAAC,IAFd;AAGIjB,UAAAA,OAAO,EAAC;AAHZ;AAKA;AACH;;AAED,WAAKa,QAAL,mBACO,KAAKd,KADZ;AAEIkB,QAAAA,SAAS,EAAC,KAFd;AAGIjB,QAAAA,OAAO,EAAC,KAHZ;AAIIE,QAAAA,WAAW,EAACY,kBAAkB,CAACV,IAAnB,CAAwBc,GAJxC;AAKId,QAAAA,IAAI,oBACG,KAAKL,KAAL,CAAWK,IADd;AAEAG,UAAAA,QAAQ,EAACO,kBAAkB,CAACV,IAAnB,CAAwBG;AAFjC;AALR;AAUH,KAhL8D;;AAAA,SAqL/DY,aArL+D,GAqLjD,CAACC,KAAD,EAAcC,GAAd,KAA2B;AAAA,YAC9BjB,IAD8B,GACxB,KAAKL,KADmB,CAC9BK,IAD8B;AAErCA,MAAAA,IAAI,CAACiB,GAAD,CAAJ,GAAUD,KAAV;AACA,WAAKP,QAAL,mBACO,KAAKd,KADZ;AAEIK,QAAAA,IAAI,EAACA;AAFT;AAIH,KA5L8D;;AAAA,SAiM/DkB,YAjM+D,GAiMlD,MAAI;AACb,WAAKT,QAAL,mBACO,KAAKd,KADZ;AAEIU,QAAAA,YAAY,EAAC;AAFjB;AAIH,KAtM8D;;AAAA,SA2M/Dc,iBA3M+D,GA2M5CC,KAAD,IAA6B;AAC3C,WAAKX,QAAL,mBACO,KAAKd,KADZ;AAEIW,QAAAA,SAAS,EAACc,KAAK,CAACC,MAAN,CAAaC;AAF3B;AAIH,KAhN8D;;AAAA,SAqN/DC,YArN+D,GAqNjDH,KAAD,IAAuB;AAChC,UAAGA,KAAK,CAACH,GAAN,KAAY,OAAf,EAAuB;AACnB,aAAKO,KAAL;AACH;AACJ,KAzN8D;;AAAA,SA8N/DA,KA9N+D,GA8NzD,YAAU;AACZ;AADY,YAELxB,IAFK,GAEC,KAAKL,KAFN,CAELK,IAFK;;AAGZ,UAAGA,IAAI,CAACC,QAAL,KAAgB,EAAhB,IACGD,IAAI,CAACE,QAAL,KAAgB,EADnB,IAEGF,IAAI,CAACI,OAAL,KAAe,EAFrB,EAEwB;AACpB;AACH,OAPW,CASZ;;;AACA,WAAKK,QAAL,mBAAkB,KAAKd,KAAvB;AAA6BE,QAAAA,UAAU,EAAC;AAAxC;AACA,YAAM4B,aAAa,GAAC,MAAO,IAAIjC,WAAJ,EAAD,CACrBkC,IADqB,CACL,6BADK,EAEjBC,OAAO,CAACC,GAAR,CAAYC,kBAAZ,KAAiC,MAAlC,qBAEO7B,IAFP;AAGI8B,QAAAA,KAAK,EAAC,uCAHV;AAIIC,QAAAA,MAAM,EAAC,CAJX;AAKIC,QAAAA,QAAQ,EAAC,MALb;AAMIC,QAAAA,QAAQ,EAAC;AANb,WAQCjC,IAViB,CAA1B,CAXY,CAwBZ;;AACA,UAAG,CAACyB,aAAa,CAACb,OAAf,IAAwB,CAACa,aAAa,CAACzB,IAA1C,EAA+C;AAC3C,aAAKS,QAAL,mBACO,KAAKd,KADZ;AAEIE,UAAAA,UAAU,EAAC,KAFf;AAGIQ,UAAAA,YAAY,EAAC;AAHjB;AAKA;AACH,OAhCW,CAkCZ;AACA;;;AACAf,MAAAA,SAAS,CAAC4C,QAAV,CAAmBJ,KAAnB,CACIL,aAAa,CAACzB,IAAd,CAAmB8B,KADvB,EAEI;AACIK,QAAAA,OAAO,EAAC,IADZ;AAEInC,QAAAA,IAAI,EAACyB,aAAa,CAACzB;AAFvB,OAFJ,EAMI,KAAKL,KAAL,CAAWW,SAAX,GAAqBf,SAAS,CAAC6C,KAA/B,GAAqC7C,SAAS,CAAC8C,OANnD,EApCY,CA6CZ;;AACA,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,OAAnB,CAA2B,yBAA3B;AACH,KA7Q8D;AAAA;;AAqC/D;;;AAGAC,EAAAA,MAAM,GAAE;AACJ,UAAMC,SAAS,GAAC;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAhB;AADI,6BAE8B,KAAKhD,KAAL,CAAWK,IAFzC;AAAA,UAEGC,QAFH,oBAEGA,QAFH;AAAA,UAEYC,QAFZ,oBAEYA,QAFZ;AAAA,UAEqBE,OAFrB,oBAEqBA,OAFrB;AAIJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,0BAAM,IAAN;AAAW,MAAA,WAAW,MAAtB;AACI,MAAA,cAAc,EAAE,KAAKT,KAAL,CAAWU,YAAX,GAAwB,OAAxB,GAAgCN,SADpD;AAEI,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWU,YAAX,GAAwB,gBAAxB,GAAyCN,SAFnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII;AAAO,MAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWE,UAA5B;AACI,MAAA,MAAM,EAAE;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,KAAK,EAAE6C,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADZ;AAEI,MAAA,WAAW,EAAC,0BAFhB;AAGI,MAAA,KAAK,EAAEzC,QAHX;AAII,MAAA,QAAQ,EAAGmB,KAAD,IACN,KAAKL,aAAL,CAAmBK,KAAK,CAACC,MAAN,CAAaL,KAAhC,EAAsC,UAAtC,CALR;AAMI,MAAA,OAAO,EAAE,KAAKE,YANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ,EAcI,0BAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,2BAAO,QAAP;AAAgB,MAAA,QAAQ,EAAE,KAAKvB,KAAL,CAAWE,UAArC;AACI,MAAA,MAAM,EAAE;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,KAAK,EAAE6C,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADZ;AAEI,MAAA,WAAW,EAAC,0BAFhB;AAGI,MAAA,KAAK,EAAExC,QAHX;AAII,MAAA,QAAQ,EAAGkB,KAAD,IACN,KAAKL,aAAL,CAAmBK,KAAK,CAACC,MAAN,CAAaL,KAAhC,EAAsC,UAAtC,CALR;AAMI,MAAA,OAAO,EAAE,KAAKE,YANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAdJ,EAwBI,0BAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,QAAQ,EAAE,KAAKvB,KAAL,CAAWE,UAA5B;AACI,MAAA,KAAK,EAAE;AAAC+C,QAAAA,KAAK,EAAC,GAAP;AAAWC,QAAAA,WAAW,EAAC;AAAvB,OADX;AAEI,MAAA,MAAM,EAAE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,KAAK,EAAEH,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFZ;AAGI,MAAA,WAAW,EAAC,8DAHhB;AAII,MAAA,KAAK,EAAEtC,OAJX;AAKI,MAAA,QAAQ,EAAGgB,KAAD,IACN,KAAKL,aAAL,CAAmBK,KAAK,CAACC,MAAN,CAAaL,KAAhC,EAAsC,SAAtC,CANR;AAOI,MAAA,OAAO,EAAE,KAAKE,YAPlB;AAQI,MAAA,SAAS,EAAE,KAAKK,YARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAWK,KAAK5B,KAAL,CAAWG,WAAX,GAEG;AAAS,MAAA,SAAS,EAAC,OAAnB;AAA2B,MAAA,KAAK,EAAC,8DAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAE,KAAKH,KAAL,CAAWG,WAArB;AAAkC,MAAA,KAAK,EAAC,KAAxC;AAA8C,MAAA,MAAM,EAAC,IAArD;AACI,MAAA,OAAO,EAAE,KAAKU,mBADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFH,GASG,KAAKb,KAAL,CAAWkB,SAAX,GAEI;AAAQ,MAAA,IAAI,EAAC,MAAb;AAAoB,MAAA,KAAK,EAAE;AAAC+B,QAAAA,KAAK,EAAC;AAAP,OAA3B;AACI,MAAA,OAAO,EAAE,KAAKpC,mBADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFJ,GASI;AAAM,MAAA,KAAK,EAAE;AAACsC,QAAAA,OAAO,EAAC,cAAT;AAAwBF,QAAAA,KAAK,EAAC;AAA9B,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAjD,2BA7BZ,CAxBJ,EAyDI,0BAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,SAAS,EAAC,YADd;AAEI,MAAA,OAAO,EAAE,KAAKjD,KAAL,CAAWW,SAFxB;AAGI,MAAA,QAAQ,EAAE,KAAKX,KAAL,CAAWE,UAHzB;AAII,MAAA,QAAQ,EAAE,KAAKsB,iBAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,EASI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAwB,MAAA,EAAE,EAAC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCATJ,CAzDJ,EAoEI,0BAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,QAAQ,EAAElB,QAAQ,KAAG,EAAX,IAAeC,QAAQ,KAAG,EAA1B,IAA8BE,OAAO,KAAG,EAA1D;AACI,MAAA,IAAI,EAAC,SADT;AACmB,MAAA,OAAO,EAAE,KAAKoB,KADjC;AAEI,MAAA,QAAQ,EAAC,QAFb;AAEsB,MAAA,SAAS,EAAC,eAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,CApEJ,CADJ;AA8EH;AAED;;;;;AAGA,QAAMuB,kBAAN,GAA0B;AAAA,iBACN,MAAM,KAAKxC,YAAL,CAAkByC,SAAlB,EADA;AAAA,UACfb,OADe,QACfA,OADe,EAEtB;;;AACA,QAAGA,OAAH,EAAW;AACP,WAAKG,KAAL,CAAWC,OAAX,CAAmBC,OAAnB,CAA2B,yBAA3B;AACA;AACH,KANqB,CAQtB;;;AACA,UAAMS,SAAS,GAAC3D,SAAS,CAAC4C,QAAV,CAAmBgB,IAAnB,EAAhB;;AACA,QAAGD,SAAH,EAAa;AAAA,YACFE,YADE,GACiBF,SADjB,CACFE,YADE;AAAA,YACWC,IADX,GACiBH,SADjB,CACWG,IADX;;AAET,UAAGD,YAAH,EAAgB;AACZ,aAAKb,KAAL,CAAWC,OAAX,CAAmBc,IAAnB,CAAwBD,IAAI,CAACE,SAAL,CAAeH,YAAf,CAAxB;AACA;AACH;AACJ,KAhBqB,CAkBtB;;;AACA,SAAK3C,mBAAL;AACH;AAED;;;;;AArJ+D;;AA+QnE,eAAepB,UAAU,CAACK,eAAD,CAAzB","sourcesContent":["import React, { ChangeEvent, KeyboardEvent } from 'react';\nimport { RouteComponentProps,Link, withRouter } from 'react-router-dom';\nimport { UrlParameter, LoginUser } from '../app/Model';\nimport { Form, Input, Checkbox, Button, Icon, Tooltip } from 'antd';\nimport { LoginChecker } from '../app/LoginChecker';\nimport { DataCache, CacheMode } from '../app/DataCache';\nimport { HttpRequest } from '../app/Request';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\n\ntype LoginForAccountProps=RouteComponentProps<UrlParameter>&{\n\n}\n\n/**\n * 用户登录：使用机构账号登录表单\n */\nclass LoginForAccount extends React.Component<LoginForAccountProps>{\n    readonly state:{\n        /**图片信息载入中 */\n        loading:boolean;\n        /**登录请求中 */\n        requesting:boolean;\n        /**图形验证码内容 */\n        imageBase64:string|undefined;\n        /**登录请求数据 */\n        data:{\n            [key:string]:string,\n        };\n        /**验证码图片载入错误 */\n        loadError:boolean;\n        /**请求出错 */\n        requestError:boolean;\n        /**是否自动登录 */\n        autoLogin:boolean;\n    }={\n        loading:true,\n        requesting:false,\n        imageBase64:undefined,\n        data:{\n            username:\"\",\n            password:\"\",\n            imgToken:\"\",\n            imgCode:\"\"\n        },\n        requestError:false,\n        autoLogin:true,\n    }\n\n    /**\n     * 登录检查器\n     */\n    private loginChecker=new LoginChecker();\n\n    /**\n     * 页面布局\n     */\n    render(){\n        const iconStyle={ color: 'rgba(0,0,0,.25)' }\n        const {username,password,imgCode}=this.state.data;\n\n        return (\n            <Form>\n                <Form.Item hasFeedback\n                    validateStatus={this.state.requestError?\"error\":undefined}\n                    help={this.state.requestError?\"登录失败，用户名或密码错误！\":undefined}\n                >\n                    <Input disabled={this.state.requesting}\n                        prefix={<Icon type=\"user\" style={iconStyle} />}\n                        placeholder=\"机构账户\" \n                        value={username}\n                        onChange={(event:ChangeEvent<HTMLInputElement>)=>\n                            this.inputOnChange(event.target.value,\"username\")}\n                        onFocus={this.inputOnFocus}\n                    />\n                </Form.Item>\n                <Form.Item>\n                    <Input.Password disabled={this.state.requesting}\n                        prefix={<Icon type=\"lock\" style={iconStyle} />}\n                        placeholder=\"登录密码\" \n                        value={password}\n                        onChange={(event:ChangeEvent<HTMLInputElement>)=>\n                            this.inputOnChange(event.target.value,\"password\")}\n                        onFocus={this.inputOnFocus}\n                    />\n                </Form.Item>\n                <Form.Item>\n                    <Input disabled={this.state.requesting}\n                        style={{width:220,marginRight:10}}\n                        prefix={<Icon type=\"credit-card\" style={iconStyle} />}\n                        placeholder=\"输入右侧的图形验证码\" \n                        value={imgCode}\n                        onChange={(event:ChangeEvent<HTMLInputElement>)=>\n                            this.inputOnChange(event.target.value,\"imgCode\")}\n                        onFocus={this.inputOnFocus}\n                        onKeyDown={this.keyDownLogin}\n                    />\n                    {this.state.imageBase64\n                    ?(\n                        <Tooltip placement=\"right\" title=\"看不清？点击换一张！\">\n                            <img src={this.state.imageBase64} width=\"110\" height=\"32\"\n                                onClick={this.loadVerifyCodeImage}\n                            />\n                        </Tooltip>\n                    )\n                    :(\n                        this.state.loadError\n                        ?(\n                            <Button type=\"link\" style={{width:110}}\n                                onClick={this.loadVerifyCodeImage}\n                            >\n                                重新载入\n                            </Button>\n                        )\n                        :(\n                            <span style={{display:\"inline-block\",width:110}}><Icon type=\"loading\"/>&nbsp;载入中</span>\n                        )\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    <Checkbox \n                        className=\"auto-login\" \n                        checked={this.state.autoLogin}\n                        disabled={this.state.requesting}\n                        onChange={this.autoLoginOnChange}\n                    >\n                        自动登录\n                    </Checkbox>\n                    <Link className=\"apply\" to=\"/public\">执业申请</Link>\n                </Form.Item>\n                <Form.Item>\n                    <Button disabled={username===\"\"||password===\"\"||imgCode===\"\"}\n                        type=\"primary\" onClick={this.login}\n                        htmlType=\"button\" className=\"button-submit\">\n                        登 录\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n\n    /**\n     * 组件载入前检查是否已经登陆，以及上次编辑的状态\n     */\n    async componentWillMount(){\n        const {isLogin}=await this.loginChecker.loginUser();\n        //已登录：跳转到机构首页\n        if(isLogin){\n            this.props.history.replace(\"/protected/organization\");\n            return;\n        }\n\n        //未登录：检查是否有编辑申请\n        const editInfor=DataCache.instance.edit();\n        if(editInfor){\n            const {serialNumber,step}=editInfor;\n            if(serialNumber){\n                this.props.history.push(step.routePath(serialNumber));\n                return;\n            }\n        }\n        \n        // 未登录载入图形验证码\n        this.loadVerifyCodeImage();\n    }\n\n    /**\n     * 载入图形验证码\n     */\n    loadVerifyCodeImage=async ()=>{\n        this.setState({...this.state,imageBase64:undefined,loading:true});\n        const verifyCodeResponse=await ((new HttpRequest())\n            .get<{img:string,imgToken:string}>(\"webapi/login/getVerCodeImg\"));\n\n        if(!verifyCodeResponse.success||!verifyCodeResponse.data){\n            this.setState({\n                ...this.state,\n                loadError:true,\n                loading:false,\n            });\n            return;\n        }\n\n        this.setState({\n            ...this.state,\n            loadError:false,\n            loading:false,\n            imageBase64:verifyCodeResponse.data.img,\n            data:{\n                ...this.state.data,\n                imgToken:verifyCodeResponse.data.imgToken\n            }\n        });\n    }\n\n    /**\n     * 输入修改\n     */\n    inputOnChange=(value:string,key:string)=>{\n        const {data}=this.state;\n        data[key]=value;\n        this.setState({\n            ...this.state,\n            data:data\n        });\n    }\n\n    /**\n     * 聚焦时取消错误信息\n     */\n    inputOnFocus=()=>{\n        this.setState({\n            ...this.state,\n            requestError:false\n        });\n    }\n\n    /**\n     * 自动登录勾选\n     */\n    autoLoginOnChange=(event:CheckboxChangeEvent)=>{\n        this.setState({\n            ...this.state,\n            autoLogin:event.target.checked\n        });\n    }\n\n    /**\n     * 回车登录\n     */\n    keyDownLogin=(event:KeyboardEvent)=>{\n        if(event.key===\"Enter\"){\n            this.login();\n        }\n    }\n\n    /**\n     * 用户登录处理\n     */\n    login=async ()=>{\n        // 验证输入\n        const {data}=this.state;\n        if(data.username===\"\"\n            ||data.password===\"\"\n            ||data.imgCode===\"\"){\n            return;\n        }\n        \n        // 登录请求\n        this.setState({...this.state,requesting:true});\n        const loginResponse=await (new HttpRequest())\n            .post<LoginUser>(\"webapi/login/loginByAccount\",\n                (process.env.REACT_APP_USE_MOCK===\"true\")\n                ?{\n                    ...data,\n                    token:\"sdjlksdjfkdlsfksdjflksdjfjlsdflksdflk\",\n                    userId:0,\n                    userName:\"人员姓名\",\n                    roleName:\"窗口人员\"\n                }\n                :data\n            );\n\n        // 登录失败\n        if(!loginResponse.success||!loginResponse.data){\n            this.setState({\n                ...this.state,\n                requesting:false,\n                requestError:true\n            });\n            return;\n        }\n\n        // 记录当前Token\n        // 勾选自动登录记录到LocalStorage中，未勾选记录到SessionStorage中\n        DataCache.instance.token(\n            loginResponse.data.token,\n            {\n                isLogin:true,\n                data:loginResponse.data\n            },\n            this.state.autoLogin?CacheMode.LOCAL:CacheMode.SESSION\n        );\n\n        // 成功后进入主页\n        this.props.history.replace(\"/protected/organization\");\n    }\n}\nexport default withRouter(LoginForAccount);"]},"metadata":{},"sourceType":"module"}