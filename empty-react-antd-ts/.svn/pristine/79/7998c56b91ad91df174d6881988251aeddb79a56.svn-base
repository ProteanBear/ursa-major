import React from 'react';
import { Breadcrumb,Icon,Typography, Button,Divider,Col, Form, Input, Select,Radio, Upload, Row, message, Modal } from 'antd';

import Container from '../../components/Container';
import {ApplySectionPrompt,ApplySectionRecordStep} from '../../components/ApplyHeader';
import ApplyFormEquipment from '../../components/ApplyFormEquipment';
import {DictionaryData,DictionaryLoader} from '../../app/DictionaryLoader';
import { ApplyFormMedical, ApplyFormMedicalType,ApplyFormMedicalTypeContext } from '../../components/ApplyFormMedical';
import { ApplyContent, ApplyStep, AppComponentProps, ApplyContentOrganization, PageError500, ApplyContentEquipment } from '../../app/Model';
import { HttpResponse, HttpRequest } from '../../app/Request';
import InteractionUtils from '../../utils/InteractionUtils';

const addressPrefix="四川省成都市高新区";

/**
 * 备案流程：第二步，机构信息
 */
class RecordOrganization extends React.Component<AppComponentProps>{
    readonly state:{
        /**申请单号 */
        serialNumber:string;
        /**保存按钮是否请求中 */
        loading:boolean;
        /**是否已经保存 */
        saved:boolean;
        /**申请内容 */
        data?:ApplyContentOrganization;
    }={
        serialNumber:this.props.match.params.id,
        loading:false,
        saved:true
    }

    /**
     * 页面布局
     */
    render(){
        //未载入数据时
        if(!this.state.data){
            return (
                <Container></Container>
            );
        }

        const {Title}=Typography;
        const {Option}=Select;
        const {getFieldDecorator} = this.props.form;
        const recordApply:ApplyContent={applyNo:"337676",applyDeadline:"2019年1月1日"};

        const content=this.state.data;
        const street:Array<DictionaryData>=DictionaryLoader.instance.street();
        const subjection:Array<DictionaryData>=DictionaryLoader.instance.subjection();
        const ownership:Array<DictionaryData>=DictionaryLoader.instance.ownership();

        return (
            <Container>
                {/* 标题 */}
                <Breadcrumb className="breadcrumb">
                    <Breadcrumb.Item><Icon type="file-text"/><span>执业申请</span></Breadcrumb.Item>
                    <Breadcrumb.Item><span>备案</span></Breadcrumb.Item>
                </Breadcrumb>
                <Title level={4} className="title-with-underline">备案申请</Title>

                {/* 顶部 */}
                <ApplySectionPrompt serialNumber={this.state.serialNumber} 
                    deadline={content.effectiveTime} />
                <ApplySectionRecordStep {...ApplyStep.RECORD_ORGANIZATION} />
                <Divider><span className="title-inner">第二步：机构信息</span></Divider>

                {/* 表单：基本信息 */}
                <Col span={22} offset={1}>
                    <h4 className="title-form-sub">基本信息</h4>
                    <Form layout="vertical">
                        <Col span={15}>
                            <Form.Item label="诊所名称">{
                                getFieldDecorator("name",{
                                    initialValue:content.name,
                                    rules:[
                                        {required:true,message:"诊所名称不能为空!"}
                                    ]
                                })(<Input name="name" placeholder="请输入" />)}
                            </Form.Item>
                        </Col>
                        <Col span={8} offset={1}>
                            <Form.Item label="所属街道">{
                                getFieldDecorator("street",{
                                    initialValue:(""===content.street?undefined:content.street),
                                    rules:[
                                        {required:true,message:"必须选择所属的街道！"}
                                    ]
                                })(
                                    <Select showSearch
                                        placeholder="选择机构所属的（高新区）街道"
                                        optionFilterProp="children"
                                        filterOption={(input, option:React.ReactElement) =>
                                            option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
                                        }
                                    >
                                        {street.map((data:DictionaryData,index:number)=>{
                                            return (<Option key={data.value}>{data.label}</Option>);
                                        })}
                                    </Select>
                                )}
                            </Form.Item>
                        </Col>
                        <Col span={7}>
                            <Form.Item label="机构地址" help="请输入详细的地址">
                                <div className="input-group">
                                    <Col span={8}><Input value="四川省" disabled/></Col>
                                    <Col span={8}><Input value="成都市" disabled/></Col>
                                    <Col span={8}><Input value="高新区" disabled/></Col>
                                    <Col span={24}>{
                                        getFieldDecorator("address",{
                                            initialValue:content.address.replace(addressPrefix,""),
                                            rules:[
                                                {required:true,message:"机构地址不能为空！"}
                                            ]
                                        })(
                                            <Input.TextArea rows={3} style={{maxHeight:73}} />
                                        )
                                    } 
                                    </Col>
                                </div>
                            
                            </Form.Item>
                        </Col>
                        <Col span={7} offset={1}>
                            <Form.Item label="统一社会信用代码">{
                                getFieldDecorator("onlyCode",{
                                    initialValue:content.onlyCode,
                                    rules:[
                                        {required:false}
                                    ]
                                })(
                                    <Input placeholder="请输入"/>
                                )}
                            </Form.Item>
                            <Form.Item label="隶属关系">{
                                getFieldDecorator("subjection",{
                                    initialValue:(""===content.membership?undefined:content.membership),
                                    rules:[
                                        {required:true,message:"必须选择隶属关系！"}
                                    ]
                                })(
                                    <Select showSearch
                                        placeholder="请选择"
                                        optionFilterProp="children"
                                        filterOption={(input, option:React.ReactElement) =>
                                            option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
                                        }
                                    >
                                        {subjection.map((data:DictionaryData,index:number)=>{
                                            return (<Option key={data.value}>{data.label}</Option>);
                                        })}
                                    </Select>
                                )}
                            </Form.Item>
                        </Col>
                        <Col span={8} offset={1}>
                            <Form.Item label="所有制性质">{
                                getFieldDecorator("ownership",{
                                    initialValue:(""===content.ownership?undefined:content.ownership),
                                    rules:[
                                        {required:true,message:"必须选择所有制性质"}
                                    ]
                                })(
                                    <Select showSearch
                                        placeholder="请选择"
                                        optionFilterProp="children"
                                        filterOption={(input, option:React.ReactElement) =>
                                            option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
                                        }
                                    >
                                        {ownership.map((data:DictionaryData,index:number)=>{
                                            return (<Option key={data.value}>{data.label}</Option>);
                                        })}
                                    </Select>
                                )}
                            </Form.Item>
                            <Form.Item label="经营性质">{
                                getFieldDecorator("natureOperation",{
                                    initialValue:(""===content.natureOperation?"营利性":content.natureOperation),
                                    rules:[
                                        {required:false}
                                    ]
                                })(
                                    <Radio.Group>
                                        <Radio value="非营利性">非营利性</Radio>
                                        <Radio value="营利性">营利性</Radio>
                                    </Radio.Group>
                                )}
                            </Form.Item>
                        </Col>
                        <Col span={12}>
                            <Form.Item label="中医诊疗技术和方案" help="填写内容限1000字以内">{
                                getFieldDecorator("medicineTechnology",{
                                    initialValue:content.medicineTechnology,
                                    rules:[
                                        {required:false}
                                    ]
                                })(
                                    <Input.TextArea rows={5} style={{maxHeight:115}}></Input.TextArea>
                                )}
                            </Form.Item>
                        </Col>
                        <Col span={11} offset={1}>
                            <Form.Item label="中医（专场）执业范围" help="填写内容限1000字以内">{
                                getFieldDecorator("medicineScope",{
                                    initialValue:content.medicineScope,
                                    rules:[
                                        {required:false}
                                    ]
                                })(
                                    <Input.TextArea rows={5} style={{maxHeight:115}}></Input.TextArea>
                                )}
                            </Form.Item>
                        </Col>
                    </Form>
                </Col>

                {/* 表单：设备清单 */}
                <Col span={22} offset={1}>
                    <h4 className="title-form-sub">设备清单</h4>
                    <ApplyFormEquipment 
                        onChange={this.equipmentChangeHandler}
                        equiptments={this.state.data.equipments} 
                    />
                </Col>

                {/* 表单：诊疗范围 */}
                <Col span={22} offset={1}>
                    <h4 className="title-form-sub">诊疗范围</h4>
                    <ApplyFormMedicalTypeContext.Provider value={{type:ApplyFormMedicalType.SIMPLE}}>
                        <ApplyFormMedical {...recordApply} />
                    </ApplyFormMedicalTypeContext.Provider>
                </Col>

                {/* 表单：上传内容 */}
                <Col span={22} offset={1}>
                    <h4 className="title-form-sub">上传内容</h4>
                    <Form labelCol={{span:7}} wrapperCol={{span:17}}>
                        <Row>
                            <Col span={12}>
                                <Form.Item label="医疗废物服务协议" help="支持扩展名：.doc .docx .pdf">{
                                    getFieldDecorator("waste",{
                                        rules:[
                                            {required:true,message:"必须上传此内容！"}
                                        ]
                                    })(
                                        <Upload>
                                            <Button><Icon type="upload"/>上传文件</Button>
                                        </Upload>
                                    )}
                                </Form.Item>
                            </Col>
                            <Col span={12}>
                                <Form.Item label="机构制度" help="支持扩展名：.doc .docx .pdf">{
                                    getFieldDecorator("regulation",{
                                        rules:[
                                            {required:false}
                                        ]
                                    })(
                                        <Upload>
                                            <Button><Icon type="upload"/>上传文件</Button>
                                        </Upload>
                                    )}
                                </Form.Item>
                            </Col>
                        </Row>
                        <Row>
                            <Col span={12}>
                                <Form.Item
                                    label="营业执照" help="支持扩展名：.jpg .png">{
                                        getFieldDecorator("license",{
                                            rules:[
                                                {required:false}
                                            ]
                                        })(
                                            <Upload
                                                name="license"
                                                listType="picture-card"
                                                className="avatar-uploader"
                                                showUploadList={false}

                                            >
                                                <div>
                                                    <Icon type="plus" />
                                                    <div className="ant-upload-text">上传</div>
                                                </div>
                                            </Upload>
                                        )}
                                </Form.Item>
                            </Col>
                            <Col span={12}>
                                <Form.Item
                                    label="房屋平面布局图" help="支持扩展名：.jpg .png">{
                                        getFieldDecorator("license",{
                                            rules:[
                                                {required:false}
                                            ]
                                        })(
                                            <Upload
                                                name="license"
                                                listType="picture-card"
                                                className="avatar-uploader"
                                                showUploadList={false}

                                            >
                                                <div>
                                                    <Icon type="plus" />
                                                    <div className="ant-upload-text">上传</div>
                                                </div>
                                            </Upload>
                                        )}
                                </Form.Item>
                            </Col>
                        </Row>
                    </Form>
                </Col>
            
                {/* 按钮 */}
                <Col span={24} className="section-buttons">
                    <Button onClick={this.prevStep}>上一步</Button>
                    <Button type="primary" onClick={this.saveCommitmentAndNext}>
                        保存并进入下一步
                    </Button>
                </Col>
            </Container>
        );
    }

    /**
     * 组件完成后请求获取申请信息
     */
    async componentDidMount(){
        message.loading("正在获取申请内容...",0);

        const applyContent:HttpResponse<ApplyContentOrganization>=
            await ((new HttpRequest()).get<ApplyContentOrganization>(
                `webapi/apply/getRecordInfo?applyNo=${this.state.serialNumber}`
            ));
        message.destroy();

        if(!applyContent.success){
            this.props.history.push(PageError500);
        }

        this.setState({
            ...this.state,
            data:applyContent.data
        });

        // 添加窗口关闭监听
        InteractionUtils.addWindowCloseListener((event:Event)=>{
            if(this.state.saved)    event.preventDefault();
            else                    event.returnValue=true;
        });
    }

    /**
     * 卸载时删除窗口关闭监听
     */
    componentWillUnmount(){
        InteractionUtils.removeWindowCloseListener();
    }

    /**
     * 提供给子组件进行调用，修改机构中的设备信息列表
     */
    equipmentChangeHandler=(equipments:Array<ApplyContentEquipment>)=>{
        if(!this.state.data) return;
        
        this.setState({
            ...this.state,
            data:{
                ...this.state.data,
                equipments:equipments
            }
        });
    }

    /**
     * 上一步
     */
    prevStep=()=>{
        const toPrevStep=()=>{
            InteractionUtils.scrollToTop();
            this.props.history.push(ApplyStep.RECORD_COMMITMENT.routePath(this.state.serialNumber));
        };

        if(!this.state.saved){
            Modal.confirm({
                title: "确定要离开这里么?",
                content:"未保存的信息将会丢失！",
                okText:"继续离开",
                cancelText:"取消",
                onOk() {toPrevStep()},
            });
            return;
        }
        
        toPrevStep();
    }

    /**
     * 保存后并进入下一步
     */
    saveCommitmentAndNext=()=>{
        //输入检验
        this.props.form.validateFieldsAndScroll(async (error,values)=>{
            if(!error){
                console.table(values);
                if(!this.state.data) return;
                this.setState({...this.state,loading:true});

                const saveResponse:HttpResponse<any>=
                    await ((new HttpRequest()).post<any,{applyNo:string,commitment:string}>(
                        "webapi/apply/saveRecordInfo",
                        {
                            applyNo:this.state.serialNumber,
                            commitment:this.state.data.commitment
                        }
                    ));

                if(!saveResponse.success){
                    this.props.history.push(PageError500);
                }

                this.setState({...this.state,loading:false});
                InteractionUtils.scrollToTop();
                this.props.history.push(ApplyStep.RECORD_ORGANIZATION.routePath(this.state.serialNumber));
            }
        });
    }
}
export default Form.create({name:"recordOrganization"})(RecordOrganization);