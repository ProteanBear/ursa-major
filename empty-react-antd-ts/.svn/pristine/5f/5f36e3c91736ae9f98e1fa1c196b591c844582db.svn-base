{"ast":null,"code":"import { DataCache } from \"./DataCache\";\nimport { HttpRequest } from \"../utils/Request\";\n/**\n * 登录用户信息\n */\n\n/**\n * 登录校验器：通过读取本地存储中的Token记录，\n * 并通过访问服务端校验token是否过期，\n * 判断用户是否已经登录。\n */\nexport class LoginChecker {\n  /**\n   * 检查用户是否已经登录；\n   * 首先访问本地存储检查是否有token保存，\n   * 包含Token则向服务端请求，检查Token有效性，\n   * token有效返回本地存储的用户信息；无效，则返回null\n   */\n  async loginUser() {\n    const _DataCache$Instance$t = DataCache.Instance.token(),\n          token = _DataCache$Instance$t.token,\n          data = _DataCache$Instance$t.data;\n\n    const falsePromise = new Promise((resolve, reject) => resolve({\n      isLogin: false\n    }));\n    if (!token) return falsePromise;\n    const checkLogin = await new HttpRequest().get(\"connect\");\n    if (!checkLogin.success) return falsePromise;\n    return await new Promise((resolve, reject) => resolve({\n      isLogin: true,\n      data: data\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/maqiang/编程/yzwj-recorder-web/src/app/LoginChecker.ts"],"names":["DataCache","HttpRequest","LoginChecker","loginUser","Instance","token","data","falsePromise","Promise","resolve","reject","isLogin","checkLogin","get","success"],"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA0C,kBAA1C;AAEA;;;;AAeA;;;;;AAKA,OAAO,MAAMC,YAAN,CAAkB;AACrB;;;;;;AAMA,QAAMC,SAAN,GAAsC;AAAA,kCACfH,SAAS,CAACI,QAAV,CAAmBC,KAAnB,EADe;AAAA,UAC3BA,KAD2B,yBAC3BA,KAD2B;AAAA,UACrBC,IADqB,yBACrBA,IADqB;;AAElC,UAAMC,YAAY,GAAC,IAAIC,OAAJ,CACf,CAACC,OAAD,EAAUC,MAAV,KAAmBD,OAAO,CAAC;AAACE,MAAAA,OAAO,EAAC;AAAT,KAAD,CADX,CAAnB;AAGA,QAAG,CAACN,KAAJ,EAAW,OAAOE,YAAP;AAEX,UAAMK,UAA4B,GAC1B,MAAQ,IAAIX,WAAJ,EAAD,CAAoBY,GAApB,CAA6B,SAA7B,CADf;AAEA,QAAG,CAACD,UAAU,CAACE,OAAf,EAAwB,OAAOP,YAAP;AAExB,WAAO,MAAM,IAAIC,OAAJ,CACT,CAACC,OAAD,EAAUC,MAAV,KAAmBD,OAAO,CAAC;AAACE,MAAAA,OAAO,EAAC,IAAT;AAAcL,MAAAA,IAAI,EAACA;AAAnB,KAAD,CADjB,CAAb;AAGH;;AArBoB","sourcesContent":["import { DataCache } from \"./DataCache\";\nimport { HttpRequest, HttpResponse } from \"../utils/Request\";\n\n/**\n * 登录用户信息\n */\nexport interface LoginUser{\n\n}\n\n/**\n * 登录状态\n */\nexport interface LoginStatus{\n    isLogin:boolean\n    data?:LoginUser\n}\n\n/**\n * 登录校验器：通过读取本地存储中的Token记录，\n * 并通过访问服务端校验token是否过期，\n * 判断用户是否已经登录。\n */\nexport class LoginChecker{\n    /**\n     * 检查用户是否已经登录；\n     * 首先访问本地存储检查是否有token保存，\n     * 包含Token则向服务端请求，检查Token有效性，\n     * token有效返回本地存储的用户信息；无效，则返回null\n     */\n    async loginUser():Promise<LoginStatus>{\n        const {token,data}=DataCache.Instance.token();\n        const falsePromise=new Promise<LoginStatus>(\n            (resolve, reject)=>resolve({isLogin:false})\n        );\n        if(!token) return falsePromise;\n\n        const checkLogin:HttpResponse<any>=\n                await ((new HttpRequest()).get<any>(\"connect\"));\n        if(!checkLogin.success) return falsePromise;\n\n        return await new Promise<LoginStatus>(\n            (resolve, reject)=>resolve({isLogin:true,data:data})\n        );\n    }    \n}"]},"metadata":{},"sourceType":"module"}