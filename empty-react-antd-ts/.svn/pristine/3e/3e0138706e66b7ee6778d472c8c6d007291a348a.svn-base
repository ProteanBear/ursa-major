import React, { ChangeEvent, KeyboardEvent } from 'react';
import { RouteComponentProps,Link, withRouter } from 'react-router-dom';
import { UrlParameter, LoginUser } from '../app/Model';
import { Form, Input, Checkbox, Button, Icon, Tooltip } from 'antd';
import { LoginChecker } from '../app/LoginChecker';
import { DataCache, CacheMode } from '../app/DataCache';
import { HttpRequest } from '../app/Request';
import { CheckboxChangeEvent } from 'antd/lib/checkbox';

type LoginForPhoneProps=RouteComponentProps<UrlParameter>&{

}

/**
 * 用户登录：使用机构账号登录表单
 */
class LoginForPhone extends React.Component<LoginForPhoneProps>{
    readonly state:{
        /**图片信息载入中 */
        loading:boolean;
        /**登录请求中 */
        requesting:boolean;
        /**图形验证码内容 */
        imageBase64:string|undefined;
        /**图形验证码Token */
        imageToken:string|undefined;
        /**输入的图形验证码内容 */
        imageCode:string;
        /**登录请求数据 */
        data:{
            [key:string]:string,
        };
        /**验证码图片载入错误 */
        loadError:boolean;
        /**请求出错 */
        requestError:boolean;
        /**是否自动登录 */
        autoLogin:boolean;
        /**再次请求验证码剩余时间 */
        remainTime:number;
        /**验证码请求中 */
        sending:boolean;
        /**验证码发送错误 */
        sendError:boolean;
    }={
        loading:true,
        requesting:false,
        imageBase64:undefined,
        imageToken:undefined,
        imageCode:"",
        data:{
            phone:"",
            code:"",
            codeToken:"",
        },
        loadError:false,
        requestError:false,
        autoLogin:true,
        remainTime:0,
        sending:false,
        sendError:false,
    }

    /**
     * 登录检查器
     */
    private loginChecker=new LoginChecker();

    /**
     * 页面布局
     */
    render(){
        const iconStyle={ color: 'rgba(0,0,0,.25)' }
        const {phone,code}=this.state.data;

        return (
            <Form>
                <Form.Item hasFeedback
                    validateStatus={this.state.requestError?"error":undefined}
                    help={this.state.requestError?"登录失败！手机号或验证码错误！":undefined}
                >
                    <Input disabled={this.state.requesting}
                        prefix={<Icon type="phone" style={iconStyle} />}
                        placeholder="手机号码" 
                        value={phone}
                        onChange={(event:ChangeEvent<HTMLInputElement>)=>
                            this.inputOnChange(event.target.value,"phone")}
                        onFocus={this.inputOnFocus}
                    />
                </Form.Item>
                <Form.Item>
                    <Input disabled={this.state.requesting}
                        style={{width:220,marginRight:10}}
                        prefix={<Icon type="credit-card" style={iconStyle} />}
                        placeholder="输入右侧的图形验证码" 
                        value={this.state.imageCode}
                        onChange={(event:ChangeEvent<HTMLInputElement>)=>
                            this.setState({...this.state,imageCode:event.target.value})}
                        onFocus={this.inputOnFocus}
                    />
                    {this.state.imageBase64
                    ?(
                        <Tooltip placement="right" title="看不清？点击换一张！">
                            <img src={this.state.imageBase64} width="110" height="32" alt="验证码"
                                onClick={this.loadVerifyCodeImage}  style={{cursor:"pointer"}}
                            />
                        </Tooltip>
                    )
                    :(
                        this.state.loadError
                        ?(
                            <Button type="link" style={{width:110}}
                                onClick={this.loadVerifyCodeImage}
                            >
                                重新载入
                            </Button>
                        )
                        :(
                            <span style={{display:"inline-block",width:110}}><Icon type="loading"/>&nbsp;载入中</span>
                        )
                    )}
                </Form.Item>
                <Form.Item>
                    <Input className="input-verify-code"
                        disabled={this.state.requesting}
                        prefix={<Icon type="lock" style={iconStyle} />}
                        placeholder="验证码" 
                        value={code}
                        onChange={(event:ChangeEvent<HTMLInputElement>)=>
                            this.inputOnChange(event.target.value,"code")}
                        onFocus={this.inputOnFocus}
                        onKeyDown={this.keyDownLogin}
                    />
                    <Button disabled={phone===""||this.state.imageCode===""||this.state.remainTime!==0}
                        htmlType="button" className="container-verify"
                        loading={this.state.sending}
                        onClick={this.sendMessageCode}
                    >
                        {this.state.remainTime||"获取验证码"}
                    </Button>
                </Form.Item>
                <Form.Item>
                    <Checkbox 
                        className="auto-login" 
                        checked={this.state.autoLogin}
                        disabled={this.state.requesting}
                        onChange={this.autoLoginOnChange}
                    >
                        自动登录
                    </Checkbox>
                    <Link className="apply" to="/public">执业申请</Link>
                </Form.Item>
                <Form.Item>
                    <Button
                        disabled={phone===""||code===""||this.state.sending}
                        loading={this.state.loading}
                        type="primary" onClick={this.login}
                        htmlType="button" className="button-submit">
                        登 录
                    </Button>
                </Form.Item>
            </Form>
        );
    }

    /**
     * 组件载入前检查是否已经登陆，以及上次编辑的状态
     */
    async componentWillMount(){
        const {isLogin}=await this.loginChecker.loginUser();
        //已登录：跳转到机构首页
        if(isLogin){
            this.props.history.replace("/protected/organization");
            return;
        }

        //未登录：检查是否有编辑申请
        const editInfor=DataCache.instance.edit();
        if(editInfor){
            const {serialNumber,step}=editInfor;
            if(serialNumber){
                this.props.history.push(step.routePath(serialNumber));
                return;
            }
        }
        
        // 未登录载入图形验证码
        this.loadVerifyCodeImage();
    }

    /**
     * 载入图形验证码
     */
    loadVerifyCodeImage=async ()=>{
        this.setState({...this.state,imageBase64:undefined,loading:true});
        const verifyCodeResponse=await ((new HttpRequest())
            .get<{img:string,imgToken:string}>("webapi/login/getVerCodeImg"));

        if(!verifyCodeResponse.success||!verifyCodeResponse.data){
            this.setState({
                ...this.state,
                loadError:true,
                loading:false,
            });
            return;
        }

        this.setState({
            ...this.state,
            loadError:false,
            loading:false,
            imageBase64:verifyCodeResponse.data.img,
            data:{
                ...this.state.data,
                imgToken:verifyCodeResponse.data.imgToken
            }
        });
    }

    /**
     * 获取短信验证码
     */
    sendMessageCode=async ()=>{
        this.setState({...this.state,sendError:false,sending:true});
        const sendResponse=await ((new HttpRequest())
            .post<any>("webapi/login/sendMessageCode",{
                phone:this.state.data.phone,
                imgCode:this.state.imageCode,
                imgToken:this.state.imageToken
            }));

        if(!sendResponse.success||!sendResponse.data){
            this.setState({
                ...this.state,
                sendError:true,
                sending:false,
            });
            return;
        }

        this.setState({
            ...this.state,
            sendError:false,
            sending:false,
        });
        this.countdown(60);
    }

    /**
     * 短信再次发送倒计时
     */
    countdown=(time:number)=>{
        if(time===0) return;
        this.setState({
            ...this.state,
            remainTime:--time
        });

        setTimeout(()=>this.countdown(time),1000);
    }

    /**
     * 输入修改
     */
    inputOnChange=(value:string,key:string)=>{
        const {data}=this.state;
        data[key]=value;
        this.setState({
            ...this.state,
            data:data
        });
    }

    /**
     * 聚焦时取消错误信息
     */
    inputOnFocus=()=>{
        this.setState({
            ...this.state,
            requestError:false
        });
    }

    /**
     * 自动登录勾选
     */
    autoLoginOnChange=(event:CheckboxChangeEvent)=>{
        this.setState({
            ...this.state,
            autoLogin:event.target.checked
        });
    }

    /**
     * 回车登录
     */
    keyDownLogin=(event:KeyboardEvent)=>{
        if(event.key==="Enter"){
            this.login();
        }
    }

    /**
     * 用户登录处理
     */
    login=async ()=>{
        // 验证输入
        const {data}=this.state;
        if(data.username===""
            ||data.password===""
            ||data.imgCode===""){
            return;
        }
        
        // 登录请求
        this.setState({...this.state,requesting:true});
        const loginResponse=await (new HttpRequest())
            .post<LoginUser>("webapi/login/loginByAccount",
                (process.env.REACT_APP_USE_MOCK==="true")
                ?{
                    ...data,
                    token:"sdjlksdjfkdlsfksdjflksdjfjlsdflksdflk",
                    userId:0,
                    userName:"人员姓名",
                    roleName:"窗口人员",
                    orgCode:"749"
                }
                :data
            );

        // 登录失败
        if(!loginResponse.success||!loginResponse.data){
            this.setState({
                ...this.state,
                requesting:false,
                requestError:true
            });
            return;
        }

        // 记录当前Token
        // 勾选自动登录记录到LocalStorage中，未勾选记录到SessionStorage中
        DataCache.instance.token(
            loginResponse.data.token,
            {
                isLogin:true,
                data:loginResponse.data
            },
            this.state.autoLogin?CacheMode.LOCAL:CacheMode.SESSION
        );

        // 成功后进入主页
        this.props.history.replace("/protected/organization");
    }
}
export default withRouter(LoginForPhone);