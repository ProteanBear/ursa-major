{"ast":null,"code":"import { string } from \"prop-types\";\n/**\n * 数据缓存器：单例模式\n */\n\nexport class DataCache {\n  constructor() {\n    this._tokenExpired = 2 * 24 * 60;\n    this._editExpired = 15 * 24 * 60;\n    this._dictionaryExpired = 60 * 24 * 60;\n    this._dataMap = new Map();\n  }\n\n  DataCache() {} // Token默认缓存时间(单位：分钟)\n\n\n  /**\n   * 写入或返回本地储存的Token\n   * @param t token内容\n   */\n  token(t) {\n    if (t) {\n      this.put(\"token\", t, this._tokenExpired);\n      return t;\n    }\n\n    return this.get(\"token\");\n  }\n  /**\n   * 写入或返回当前用户信息\n   * @param data 编辑记录内容\n   */\n\n\n  user(data) {\n    if (data) {\n      this.put(\"login_user\", JSON.stringify(data), this._editExpired);\n      return data;\n    }\n\n    const value = this.get(\"login_user\");\n    return value ? JSON.parse(value) : value;\n  }\n  /**\n   * 写入或返回当前编辑情况的记录，如备案申请的信息（单号，第一步等）\n   * @param data 编辑记录内容\n   */\n\n\n  edit(data) {\n    if (data) {\n      this.put(\"edit\", JSON.stringify(data), this._editExpired);\n      return data;\n    }\n\n    const value = this.get(\"edit\");\n    return value ? JSON.parse(value) : value;\n  }\n  /**\n   * 用于不同路由之间的数据传递（仅记录在内存中）\n   * @param data 数据内容\n   */\n\n\n  transfer(data) {\n    if (data) {\n      this._dataMap.set(\"transferData\", data);\n    }\n\n    return this._dataMap.get(\"transferData\");\n  }\n  /**\n   * 获取或插入数据字典信息\n   * @param keyOrData 子项键名或插入数据对象\n   */\n\n\n  dictionary(keyOrData) {\n    //写入模式\n    if (keyOrData && !(keyOrData instanceof string)) {\n      this.put(\"dictionary\", JSON.stringify(keyOrData), this._dictionaryExpired);\n      return keyOrData;\n    }\n\n    const value = this.get(\"dictionary\");\n    const data = value ? JSON.parse(value) : null; //全部返回模式\n\n    if (!data) return data; //子项返回模式\n\n    return data[keyOrData];\n  }\n  /**\n   * 本地存储写入\n   * @param key \n   * @param value \n   * @param expired 过期时间（单位为分钟）\n   */\n\n\n  put(key, value, expired) {\n    if (!window.localStorage) {\n      return;\n    }\n\n    localStorage.setItem(key, value);\n\n    if (expired) {\n      localStorage.setItem(key + \"_expired\", String(Date.now() + expired * 60 * 1000));\n    }\n  } //本地存储读取\n\n\n  get(key) {\n    if (!window.localStorage) {\n      return undefined;\n    } // 检查过期后删除\n\n\n    const now = Date.now();\n    const expired = localStorage.getItem(key + \"_expired\") || now + 1;\n\n    if (now >= expired) {\n      localStorage.removeItem(key);\n      return null;\n    }\n\n    return localStorage.getItem(key);\n  }\n\n}\nDataCache.Instance = new DataCache();","map":{"version":3,"sources":["/Users/maqiang/编程/yzwj-recorder-web/src/app/DataCache.ts"],"names":["string","DataCache","_tokenExpired","_editExpired","_dictionaryExpired","_dataMap","Map","token","t","put","get","user","data","JSON","stringify","value","parse","edit","transfer","set","dictionary","keyOrData","key","expired","window","localStorage","setItem","String","Date","now","undefined","getItem","removeItem","Instance"],"mappings":"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","sourcesContent":["import { string } from \"prop-types\";\n\n/**\n * 数据缓存器：单例模式\n */\nexport class DataCache{\n    public static readonly Instance:DataCache=new DataCache();\n    private DataCache(){}\n\n    // Token默认缓存时间(单位：分钟)\n    private _tokenExpired:number=2*24*60;\n    // 工单编辑默认缓存时间(单位：分钟)\n    private _editExpired:number=15*24*60;\n    // 字典数据默认缓存时间(单位：分钟)\n    private _dictionaryExpired:number=60*24*60;\n\n    //记录传递的数据信息\n    private _dataMap:Map<string,any>=new Map();\n\n    /**\n     * 写入或返回本地储存的Token\n     * @param t token内容\n     */\n    token(t?:string){\n        if(t){\n            this.put(\"token\",t,this._tokenExpired);\n            return t;\n        }\n        return this.get(\"token\");\n    }\n\n    /**\n     * 写入或返回当前用户信息\n     * @param data 编辑记录内容\n     */\n    user(data?:any){\n        if(data){\n            this.put(\"login_user\",JSON.stringify(data),this._editExpired);\n            return data;\n        }\n        \n        const value=this.get(\"login_user\");\n        return value?JSON.parse(value):value;\n    }\n\n    /**\n     * 写入或返回当前编辑情况的记录，如备案申请的信息（单号，第一步等）\n     * @param data 编辑记录内容\n     */\n    edit(data?:any){\n        if(data){\n            this.put(\"edit\",JSON.stringify(data),this._editExpired);\n            return data;\n        }\n        \n        const value=this.get(\"edit\");\n        return value?JSON.parse(value):value;\n    }\n\n    /**\n     * 用于不同路由之间的数据传递（仅记录在内存中）\n     * @param data 数据内容\n     */\n    transfer(data?:any){\n        if(data){\n            this._dataMap.set(\"transferData\",data);\n        }\n        return this._dataMap.get(\"transferData\");\n    }\n\n    /**\n     * 获取或插入数据字典信息\n     * @param keyOrData 子项键名或插入数据对象\n     */\n    dictionary(keyOrData?:string|any){\n        //写入模式\n        if(keyOrData&&!(keyOrData instanceof string)){\n            this.put(\"dictionary\",JSON.stringify(keyOrData),this._dictionaryExpired);\n            return keyOrData;\n        }\n\n        const value=this.get(\"dictionary\");\n        const data=value?JSON.parse(value):null;\n\n        //全部返回模式\n        if(!data) return data;\n        //子项返回模式\n        return data[keyOrData];\n    }\n\n    /**\n     * 本地存储写入\n     * @param key \n     * @param value \n     * @param expired 过期时间（单位为分钟）\n     */\n    private put(key:string,value:string,expired:number):void{\n        if(!window.localStorage){\n            return;\n        }\n\n        localStorage.setItem(key,value);\n        if(expired){\n            localStorage.setItem(key+\"_expired\",String(Date.now()+expired*60*1000));\n        }\n    }\n\n    //本地存储读取\n    private get(key:string){\n        if(!window.localStorage){\n            return undefined;\n        }\n\n        // 检查过期后删除\n        const now=Date.now();\n        const expired=localStorage.getItem(key+\"_expired\")||now+1;\n        if(now>=expired){\n            localStorage.removeItem(key);\n            return null;\n        }\n        \n        return localStorage.getItem(key);\n    }\n}"]},"metadata":{},"sourceType":"module"}