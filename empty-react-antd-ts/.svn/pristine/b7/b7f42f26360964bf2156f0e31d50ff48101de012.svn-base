{"ast":null,"code":"/**\n * Token记录的模式\n */\nexport let CacheMode;\n/**\n * 数据缓存器：单例模式\n */\n\n(function (CacheMode) {\n  CacheMode[CacheMode[\"LOCAL\"] = 0] = \"LOCAL\";\n  CacheMode[CacheMode[\"SESSION\"] = 1] = \"SESSION\";\n})(CacheMode || (CacheMode = {}));\n\nexport class DataCache {\n  constructor() {\n    this._tokenExpired = 2 * 24 * 60;\n    this._editExpired = 15 * 24 * 60;\n    this._dictionaryExpired = 60 * 24 * 60;\n    this._dataMap = new Map();\n  }\n\n  DataCache() {} // Token默认缓存时间(单位：分钟)\n\n\n  /**\n   * 写入或返回本地储存的Token\n   * @param t token内容\n   */\n  token(t, data) {\n    if (t && data) {\n      this.put(\"token\", t, this._tokenExpired);\n      this.put(\"token_data\", JSON.stringify(data), this._tokenExpired);\n      return {\n        token: t,\n        data: data\n      };\n    }\n\n    const dataJson = this.get(\"token_data\");\n    return {\n      token: this.get(\"token\"),\n      data: dataJson ? JSON.parse(dataJson) : null\n    };\n  }\n  /**\n   * 写入或返回当前编辑情况的记录，如备案申请的信息（单号，第一步等）;\n   * 传空参数，返回最后一次编辑的申请；\n   * 传字符串参数，返回指定申请单号的申请；\n   * 传数据内容，写入申请单号信息到缓存中。\n   * @param data 编辑记录内容\n   */\n\n\n  edit(data) {\n    //写入\n    if (data && typeof data !== \"string\") {\n      const applyData = data;\n      this.put(\"edit_\".concat(applyData.serialNumber), JSON.stringify(data), this._editExpired);\n      this.put(\"edit_latest\", applyData.serialNumber, this._editExpired);\n      return applyData;\n    } //未传递参数，获取最后一次编辑的单号\n\n\n    const latestNumber = data ? data : this.get(\"edit_latest\");\n    const value = this.get(\"edit_\".concat(latestNumber));\n    return value ? JSON.parse(value) : null;\n  }\n  /**\n   * 用于不同路由之间的数据传递（仅记录在内存中）\n   * @param data 数据内容\n   */\n\n\n  transfer(data) {\n    if (data) {\n      this._dataMap.set(\"transferData\", data);\n    }\n\n    return this._dataMap.get(\"transferData\");\n  }\n  /**\n   * 获取或插入数据字典信息\n   * @param keyOrData 子项键名或插入数据对象\n   */\n\n\n  dictionary(keyOrData) {\n    //写入模式\n    if (keyOrData && !(typeof keyOrData === \"string\")) {\n      this.put(\"dictionary\", JSON.stringify(keyOrData), this._dictionaryExpired);\n      return keyOrData;\n    }\n\n    const value = this.get(\"dictionary\");\n    const data = value ? JSON.parse(value) : null; //全部返回模式\n\n    if (!data) return data; //子项返回模式\n\n    return data[keyOrData];\n  }\n  /**\n   * 本地存储写入\n   * @param key \n   * @param value \n   * @param expired 过期时间（单位为分钟）\n   */\n\n\n  put(key, value, expired) {\n    if (!window.localStorage) return;\n    localStorage.setItem(key, value);\n\n    if (expired) {\n      localStorage.setItem(key + \"_expired\", String(Date.now() + expired * 60 * 1000));\n    }\n  } //本地存储读取\n\n\n  get(key) {\n    if (!window.localStorage) return null; // 检查过期后删除\n\n    const now = Date.now();\n    const expired = localStorage.getItem(key + \"_expired\") || now + 1;\n\n    if (now >= expired) {\n      localStorage.removeItem(key);\n      return null;\n    }\n\n    return localStorage.getItem(key);\n  }\n\n}\nDataCache.instance = new DataCache();","map":{"version":3,"sources":["/Users/maqiang/编程/yzwj-recorder-web/src/app/DataCache.ts"],"names":["CacheMode","DataCache","_tokenExpired","_editExpired","_dictionaryExpired","_dataMap","Map","token","t","data","put","JSON","stringify","dataJson","get","parse","edit","applyData","serialNumber","latestNumber","value","transfer","set","dictionary","keyOrData","key","expired","window","localStorage","setItem","String","Date","now","getItem","removeItem","instance"],"mappings":"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","sourcesContent":["import { LoginStatus, ApplyEditInfor } from \"./Model\";\n\n/**\n * Token记录的模式\n */\nexport enum CacheMode{\n    LOCAL,SESSION\n}\n\n/**\n * 数据缓存器：单例模式\n */\nexport class DataCache{\n    public static readonly instance:DataCache=new DataCache();\n    private DataCache(){}\n\n    // Token默认缓存时间(单位：分钟)\n    private _tokenExpired:number=2*24*60;\n    // 工单编辑默认缓存时间(单位：分钟)\n    private _editExpired:number=15*24*60;\n    // 字典数据默认缓存时间(单位：分钟)\n    private _dictionaryExpired:number=60*24*60;\n\n    //记录传递的数据信息\n    private _dataMap:Map<string,any>=new Map();\n\n    /**\n     * 写入或返回本地储存的Token\n     * @param t token内容\n     */\n    token(t?:string,data?:LoginStatus):{token:string|null,data?:LoginStatus}{\n        if(t&&data){\n            this.put(\"token\",t,this._tokenExpired);\n            this.put(\"token_data\",JSON.stringify(data),this._tokenExpired);\n            return {token:t,data:data};\n        }\n        const dataJson=this.get(\"token_data\");\n        return {token:this.get(\"token\"),data:dataJson?JSON.parse(dataJson):null};\n    }\n\n    /**\n     * 写入或返回当前编辑情况的记录，如备案申请的信息（单号，第一步等）;\n     * 传空参数，返回最后一次编辑的申请；\n     * 传字符串参数，返回指定申请单号的申请；\n     * 传数据内容，写入申请单号信息到缓存中。\n     * @param data 编辑记录内容\n     */\n    edit(data?:string|ApplyEditInfor):ApplyEditInfor|null{\n        //写入\n        if(data&&(typeof data!==\"string\")){\n            const applyData=(data as ApplyEditInfor);\n            this.put(`edit_${applyData.serialNumber}`,JSON.stringify(data),this._editExpired);\n            this.put(\"edit_latest\",applyData.serialNumber,this._editExpired);\n            return applyData;\n        }\n\n        //未传递参数，获取最后一次编辑的单号\n        const latestNumber=data?data:this.get(\"edit_latest\");\n        const value=this.get(`edit_${latestNumber}`);\n        return value?JSON.parse(value):null;\n    }\n\n    /**\n     * 用于不同路由之间的数据传递（仅记录在内存中）\n     * @param data 数据内容\n     */\n    transfer(data?:any){\n        if(data){\n            this._dataMap.set(\"transferData\",data);\n        }\n        return this._dataMap.get(\"transferData\");\n    }\n\n    /**\n     * 获取或插入数据字典信息\n     * @param keyOrData 子项键名或插入数据对象\n     */\n    dictionary(keyOrData?:string|any){\n        //写入模式\n        if(keyOrData&&!(typeof keyOrData===\"string\")){\n            this.put(\"dictionary\",JSON.stringify(keyOrData),this._dictionaryExpired);\n            return keyOrData;\n        }\n\n        const value=this.get(\"dictionary\");\n        const data=value?JSON.parse(value):null;\n\n        //全部返回模式\n        if(!data) return data;\n        //子项返回模式\n        return data[keyOrData];\n    }\n\n    /**\n     * 本地存储写入\n     * @param key \n     * @param value \n     * @param expired 过期时间（单位为分钟）\n     */\n    private put(key:string,value:string,expired:number):void{\n        if(!window.localStorage) return;\n\n        localStorage.setItem(key,value);\n        if(expired){\n            localStorage.setItem(key+\"_expired\",String(Date.now()+expired*60*1000));\n        }\n    }\n\n    //本地存储读取\n    private get(key:string){\n        if(!window.localStorage) return null;\n\n        // 检查过期后删除\n        const now=Date.now();\n        const expired=localStorage.getItem(key+\"_expired\")||now+1;\n        if(now>=expired){\n            localStorage.removeItem(key);\n            return null;\n        }\n        \n        return localStorage.getItem(key);\n    }\n}"]},"metadata":{},"sourceType":"module"}