# JSON设置

# 格式设置
# 决定parser将是否允许解析使用Java/C++ 样式的注释（包括'/'+'*' 和'//' 变量）
jackson.allowComments=true
# 决定parser是否将允许使用非双引号属性名字（这种形式在Javascript中被允许，但是JSON标准说明书中没有）
jackson.allowUnquotedFieldNames=false
# 决定parser是否允许单引号来包住属性名称和字符串值
jackson.allowSingleQuotes=false
# 决定parser是否允许JSON字符串包含非引号控制字符（值小于32的ASCII字符，包含制表符和换行符）
jackson.allowUnquotedControlChars=false
# 可以允许接受所有引号引起来的字符，使用‘反斜杠\’机制
# 如果不允许，只有JSON标准说明书中 列出来的字符可以被避开约束
jackson.allowBackslashEscapingAnyCharacter=false
# 允许parser可以识别"Not-a-Number" (NaN)标识集合作为一个合法的浮点数
jackson.allowNonNumericNumbers=false

# 反序列化设置（用于@RequestBody）
# 决定了使用枚举值的标准序列化机制
# 如果允许，则枚举假定使用Enum.toString()返回的值作为序列化结构
# 如果禁止, 则返回Enum.name()的值
jackson.readEnumsUsingToString=false
# 决定了当遇到未知属性（没有映射到属性，没有任何setter或者任何可以处理它的handler）
# 是否应该抛出一个JsonMappingException异常
jackson.failOnUnknownProperties=true
# 决定当遇到JSON null的对象是java 原始类型，则是否抛出异常
# 当false时，则使用0 for 'int', 0.0 for double 来设定原始对象初始值
jackson.failOnNulForPrimitives=false
# 决定JSON 整数是否是一个有效的值，当被用来反序列化Java枚举值
# 如果false，数字可以接受，并且映射为枚举的值ordinal()
jackson.failOnNumbersForEnums=false
# 决定是否接受强制非数组（JSON）值到Java集合类型
# 如果允许，集合反序列化将尝试处理非数组值
jackson.acceptSingleValueAsArray=false
# 可以允许JSON空字符串转换为POJO对象为null
# 如果禁用，则标准POJO只会从JSON null或者JSON对象转换过来
# 如果允许，则空JSON字符串可以等价于JSON null
jackson.acceptEmptyStringAsNullObject=false

# 序列化设置（用于@ResponseBody）
# 是否排除空属性
jackson.includeNull=true
# 缩进输出
jackson.indentOutput=true
# 格式化日期
jackson.dateFormat=yyyy-MM-dd hh:mm:ss
# 决定对Enum 枚举值使用标准的序列化机制
# 如果true，则返回Enum.toString()值，否则为Enum.name()
jackson.writeEnumsUsingToString=false
# 该特性决定是否在writeValue()方法之后就调用JsonGenerator.flush()方法
# 当我们需要先压缩，然后再flush，则可能需要false。
jackson.flushAfterWriteValue=true
# 决定是否将基于Date的值序列化为timestamp数字式的值，或者作为文本表示
jackson.writeDatesAsTimestamps=false
# 是否将Map中得key为Date的值，也序列化为timestamps形式（否则，会被序列化为文本形式的值）
jackson.writeDateKeysAsTimestamps=false
# 该特性决定怎样处理类型char[]序列化，是否序列化为一个显式的JSON数组，还是默认作为一个字符串
jackson.writeCharArraysAsJsonArrays=false